//
// AUTOMATICALLY GENERATED: DO NOT EDIT
// @generated by gen-class-map.cpp
// ../tools/bootstrap/gen-class-map
//   --system
//   /tmp/hhvm-3.12.1/hphp/system/class_map.cpp
//   /tmp/hhvm-3.12.1/hphp/system/constants.h
//   /tmp/hhvm-3.12.1/hphp/system/idl/constants.idl.json
//   /tmp/hhvm-3.12.1/hphp/runtime/ext/collections/../../../system/idl/collections.idl.json
//
#include "hphp/runtime/base/externals.h"
#include "hphp/runtime/base/plain-file.h"
#include "hphp/system/constants.h"
#include "hphp/runtime/ext/extension.h"
#include "hphp/runtime/ext/ext.h"
namespace HPHP {
const char *g_class_map[] = {
  NULL,
  (const char *)ClassInfo::IsSystem, NULL, "", "", NULL, NULL, "", NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x1800a020, "HH\\Vector", "", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.HH\\Vector.php )\n * An ordered collection where values are keyed using integers 0 thru n-1 in order.\n *\n */",
  "mutablevector", NULL,
  (const char *)0x10002040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.--construct.php )\n * Returns a Vector built from the values produced by the specified Iterable.\n *\n * @iterable mixed \n *\n */",
  (const char *)0x1,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "N;", (const char*)2, "null", (const char*)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "isEmpty", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.isEmpty.php )\n * Returns true if the Vector is empty, false otherwise.\n *\n * @return bool \n */",
  (const char *)0x9,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.count.php )\n * Returns the number of values in the Vector.\n *\n * @return int64_t \n */",
  (const char *)0x11,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "items", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.items.php )\n * Returns an Iterable that produces the values from this Vector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "keys", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.keys.php )\n * Returns a Vector built from the keys of this Vector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "values", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.values.php )\n * Returns a clone of this Vector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lazy", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.lazy.php )\n * Returns a lazy iterable view of this Vector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "at", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.at.php )\n * Returns the value at the specified key. If the key is not present, an exception is thrown.\n *\n * @key mixed \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.get.php )\n * Returns the value at the specified key. If the key is not present, null is returned.\n *\n * @key mixed \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.set.php )\n * Stores a value into the Vector with the specified key, overwriting any previous value that was associated with the key; if the key is outside the bounds of the Vector, an exception is thrown.\n *\n * @key mixed \n * @value mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "setAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.setAll.php )\n * Stores each value produced by the specified KeyedIterable into the Vector using its corresponding key, overwriting any previous value that was associated with that key; if the key is outside the bounds of the Vector, an exception is thrown.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "clear", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.clear.php )\n * Removes all values from the Vector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "contains", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.contains.php )\n * Returns true if the specified key is present in the Vector, returns false otherwise.\n *\n * @key mixed \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "containsKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.containsKey.php )\n * Returns true if the specified key is present in the Vector, returns false otherwise.\n *\n * @key mixed \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "removeKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.removeKey.php )\n * Removes the element with the specified key from this Vector and renumbers the keys of all subsequent elements.\n *\n * @key mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "append", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.append.php )\n *\n * @val mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "val", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.add.php )\n * Adds the specified value to the end of this Vector using the next available integer key.\n *\n * @val mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "val", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "addAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.addAll.php )\n * Adds the values produced by the specified Iterable to the end of this Vector using the next available integer keys.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "addAllKeysOf", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.addAllKeysOf.php )\n * Adds the keys of the specified KeyedContainer to the end of this Vector using the next available integer keys.\n *\n * @container mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "container", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "pop", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.pop.php )\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "resize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.resize.php )\n *\n * @sz mixed \n * @value mixed \n *\n */",
  (const char *)0x1,
  (const char *)0x2000, "sz", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "reserve", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.reserve.php )\n * Instructs this Vector to grow its capacity to accommodate the given number of elements. The caller is expected to make the appropriate add/addAll calls to fill that reserved capacity.\n *\n * @sz mixed \n *\n */",
  (const char *)0x1,
  (const char *)0x2000, "sz", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.toArray.php )\n * Returns an array built from the values from this Vector.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toVector", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.toVector.php )\n * Returns a copy of this Vector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmVector", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.toImmVector.php )\n * Returns a ImmVector built from the values of this Vector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "immutable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.immutable.php )\n * Returns an immutable version of this collection.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toMap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.toMap.php )\n * Returns a Map built from the keys and values of this Vector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmMap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.toImmMap.php )\n * Returns a ImmMap built from the keys and values of this Vector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toSet", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.toSet.php )\n * Returns a Set built from the values of this Vector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmSet", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.toImmSet.php )\n * Returns a ImmSet built from the values of this Vector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toKeysArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.toKeysArray.php )\n * Returns an array built from the keys from this Vector.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toValuesArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.toValuesArray.php )\n * Returns an array built from the values from this Vector.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "getIterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.getIterator.php )\n * Returns an iterator that points to beginning of this Vector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "map", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.map.php )\n * Returns a Vector of the values produced by applying the specified callback on each value from this Vector.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "mapWithKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.mapWithKey.php )\n * Returns a Vector of the values produced by applying the specified callback on each key and value from this Vector.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "filter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.filter.php )\n * Returns a Vector of all the values from this Vector for which the specified callback returns true.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "filterWithKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.filterWithKey.php )\n * Returns a Vector of all the values from this Vector for which the specified callback returns true.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "zip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.zip.php )\n * Returns a KeyedIterable produced by combined the specified Iterables pair-wise.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "take", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.take.php )\n * Returns a Vector containing the first n values of this Vector.\n *\n * @n mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "n", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "takeWhile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.takeWhile.php )\n * Returns a Vector containing the values of this Vector up to but not including the first value that produces false when passed to the specified callback.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "skip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.skip.php )\n * Returns a Vector containing all the values except the first n of this Vector.\n *\n * @n mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "n", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "skipWhile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.skipWhile.php )\n * Returns a Vector containing the values of this Vector excluding the first values that produces true when passed to the specified callback.\n *\n * @fn mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "fn", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "slice", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.slice.php )\n * Returns a Vector containing the specified range of values from this Vector. The range is specified by two non-negative integers: a starting position and a length.\n *\n * @start mixed \n * @len mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "start", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "concat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.concat.php )\n * Builds a new Vector by concatenating the elements of this Vector with the elements of the specified Iterable.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "firstValue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.firstValue.php )\n * Returns the first value from this Vector, or null if this Vector is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "firstKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.firstKey.php )\n * Returns the first key from this Vector, or null if this Vector is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lastValue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.lastValue.php )\n * Returns the last value from this Vector, or null if this Vector is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lastKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.lastKey.php )\n * Returns the last key from this Vector, or null if this Vector is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "reverse", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.reverse.php )\n * Reverses the values of the Vector in place.\n *\n */",
  (const char *)0x1,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "splice", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.splice.php )\n * Splices the values of the Vector in place (see the documentation for array_splice() on php.net for more details.\n *\n * @offset mixed \n * @len mixed \n * @replacement mixed \n *\n */",
  (const char *)0x1,
  (const char *)0x2000, "offset", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xffffffff,
    "N;", (const char*)2, "null", (const char*)4, NULL,
  (const char *)0x2000, "replacement", "", (const char *)0xffffffff,
    "N;", (const char*)2, "null", (const char*)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "linearSearch", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.linearSearch.php )\n * Returns index of the specified value if it is present, -1 otherwise.\n *\n * @search_value mixed \n *\n * @return int64_t \n */",
  (const char *)0x11,
  (const char *)0x2000, "search_value", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "shuffle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.shuffle.php )\n * Shuffles the values of the Vector randomly in place.\n *\n */",
  (const char *)0x1,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__toString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.--toString.php )\n *\n * @return String \n */",
  (const char *)0x22,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.--get.php )\n *\n * @name  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.--set.php )\n *\n * @name  \n * @value  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.--isset.php )\n *\n * @name  \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__unset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.--unset.php )\n *\n * @name  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002240, "fromItems", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.fromItems.php )\n * Returns a Vector built from the values produced by the specified Iterable.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002240, "fromKeysOf", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.fromKeysOf.php )\n * Returns a Vector built from the keys of the specified container.\n *\n * @container mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "container", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002240, "fromArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Vector.fromArray.php )\n * Returns a Vector built from the values from the specified array.\n *\n * @arr mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "arr", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x1800a020, "HH\\ImmVector", "", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.HH\\ImmVector.php )\n * An immutable ordered collection where values are keyed using integers 0 thru n-1 in order.\n *\n */",
  "constvector", NULL,
  (const char *)0x10002040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.--construct.php )\n * Returns a ImmVector built from the values produced by the specified Iterable.\n *\n * @iterable mixed \n *\n */",
  (const char *)0x1,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "N;", (const char*)2, "null", (const char*)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002240, "fromItems", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.fromItems.php )\n * Returns an ImmVector built from the values produced by the specified Iterable.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002240, "fromKeysOf", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.fromKeysOf.php )\n * Returns a ImmVector built from the keys of the specified container.\n *\n * @container mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "container", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "isEmpty", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.isEmpty.php )\n * Returns true if the ImmVector is empty, false otherwise.\n *\n * @return bool \n */",
  (const char *)0x9,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.count.php )\n * Returns the number of values in the ImmVector.\n *\n * @return int64_t \n */",
  (const char *)0x11,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "items", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.items.php )\n * Returns an Iterable that produces the values from this ImmVector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "containsKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.containsKey.php )\n * Returns true if the specified key is present in the ImmVector, returns false otherwise.\n *\n * @key mixed \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "at", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.at.php )\n * Returns the value at the specified key. If the key is not present, an exception is thrown.\n *\n * @key mixed \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.get.php )\n * Returns the value at the specified key. If the key is not present, null is returned.\n *\n * @key mixed \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "getIterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.getIterator.php )\n * Returns an iterator that points to beginning of this ImmVector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "map", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.map.php )\n * Returns a Vector of the values produced by applying the specified callback on each value from this ImmVector.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "mapWithKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.mapWithKey.php )\n * Returns a Vector of the values produced by applying the specified callback on each key and value from this ImmVector.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "filter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.filter.php )\n * Returns a Vector of all the values from this ImmVector for which the specified callback returns true.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "filterWithKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.filterWithKey.php )\n * Returns a Vector of all the values from this ImmVector for which the specified callback returns true.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "zip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.zip.php )\n * Returns a KeyedIterable produced by combined the specified Iterables pair-wise.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "take", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.take.php )\n * Returns a ImmVector containing the first n values of this ImmVector.\n *\n * @n mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "n", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "takeWhile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.takeWhile.php )\n * Returns a ImmVector containing the values of this ImmVector up to but not including the first value that produces false when passed to the specified callback.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "skip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.skip.php )\n * Returns a ImmVector containing all values except the first n of this ImmVector.\n *\n * @n mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "n", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "skipWhile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.skipWhile.php )\n * Returns a ImmVector containing the values of this ImmVector excluding the first values that produces true when passed to the specified callback.\n *\n * @fn mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "fn", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "slice", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.slice.php )\n * Returns an ImmVector containing the specified range of values from this ImmVector. The range is specified by two non-negative integers: a starting position and a length.\n *\n * @start mixed \n * @len mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "start", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "concat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.concat.php )\n * Builds a new ImmVector by concatenating the elements of this ImmVector with the elements of the specified Iterable.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "firstValue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.firstValue.php )\n * Returns the first value from this ImmVector, or null if this ImmVector is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "firstKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.firstKey.php )\n * Returns the first key from this ImmVector, or null if this ImmVector is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lastValue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.lastValue.php )\n * Returns the last value from this ImmVector, or null if this ImmVector is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lastKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.lastKey.php )\n * Returns the last key from this ImmVector, or null if this ImmVector is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "keys", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.keys.php )\n * Returns an Iterable that produces the keys from this ImmVector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__toString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.--toString.php )\n *\n * @return String \n */",
  (const char *)0x22,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.--get.php )\n *\n * @name  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.--set.php )\n *\n * @name  \n * @value  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.--isset.php )\n *\n * @name  \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__unset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.--unset.php )\n *\n * @name  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toVector", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.toVector.php )\n * Returns a Vector built from the values of this ImmVector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmVector", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.toImmVector.php )\n * Returns an immutable version of this collection.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toMap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.toMap.php )\n * Returns a Map built from the keys and values of this ImmVector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmMap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.toImmMap.php )\n * Returns a ImmMap built from the keys and values of this ImmVector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toSet", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.toSet.php )\n * Returns a Set built from the values of this ImmVector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmSet", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.toImmSet.php )\n * Returns a ImmSet built from the values of this ImmVector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "immutable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.immutable.php )\n * Returns an immutable version of this collection.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "values", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.values.php )\n * Returns a clone of this ImmVector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lazy", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.lazy.php )\n * Returns a lazy iterable view of this ImmVector.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.toArray.php )\n * Returns an array built from the values from this ImmVector.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toKeysArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.toKeysArray.php )\n * Returns an array built from the keys from this ImmVector.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toValuesArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.toValuesArray.php )\n * Returns an array built from the values from this ImmVector.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "linearSearch", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmVector.linearSearch.php )\n * Returns index of the specified value if it is present, -1 otherwise.\n *\n * @search_value mixed \n *\n * @return int64_t \n */",
  (const char *)0x11,
  (const char *)0x2000, "search_value", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x1800a020, "HH\\Map", "", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.HH\\Map.php )\n * An ordered dictionary-style collection.\n *\n */",
  "mutablemap", NULL,
  (const char *)0x10002040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.--construct.php )\n * Returns a Map built from the keys and values produced by the specified KeyedIterable.\n *\n * @iterable mixed \n *\n */",
  (const char *)0x1,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "N;", (const char*)2, "null", (const char*)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "isEmpty", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.isEmpty.php )\n * Returns true if the Map is empty, false otherwise.\n *\n * @return bool \n */",
  (const char *)0x9,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.count.php )\n * Returns the number of key/value pairs in the Map.\n *\n * @return int64_t \n */",
  (const char *)0x11,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "items", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.items.php )\n * Returns an Iterable that produces the key/value Pairs from this Map.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "keys", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.keys.php )\n * Returns a Vector built from the keys of this Map.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lazy", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.lazy.php )\n * Returns a lazy iterable view of this Map.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "at", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.at.php )\n * Returns the value at the specified key. If the key is not present, an exception is thrown.\n *\n * @key mixed \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.get.php )\n * Returns the value at the specified key. If the key is not present, null is returned.\n *\n * @key mixed \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.set.php )\n * Stores a value into the Map with the specified key, overwriting any previous value that was associated with the key.\n *\n * @key mixed \n * @value mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "setAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.setAll.php )\n * Stores each value produced by the specified KeyedIterable into the Map using its corresponding key, overwriting any previous value that was associated with that key.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "clear", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.clear.php )\n * Removes all key/value pairs from the Map.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "contains", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.contains.php )\n * Returns true if the specified key is present in the Map, false otherwise.\n *\n * @key mixed \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "containsKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.containsKey.php )\n * Returns true if the specified key is present in the Map, false otherwise.\n *\n * @key mixed \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "remove", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.remove.php )\n * Removes the specified key from this Map.\n *\n * @key mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "removeKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.removeKey.php )\n * Removes the specified key from this Map.\n *\n * @key mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.add.php )\n * Adds the specified key/value Pair to this Map. If an element with the same key is already present, an exception is thrown.\n *\n * @val mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "val", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "addAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.addAll.php )\n * Adds the key/value Pairs produced by the specified Iterable to this Map.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "reserve", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.reserve.php )\n * Instructs this Map to grow its capacity to accommodate the given number of elements. The caller is expected to make the appropriate add/set/addAll/setAll calls to fill this reserved capacity.\n *\n * @sz mixed \n *\n */",
  (const char *)0x1,
  (const char *)0x2000, "sz", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.toArray.php )\n * Returns an array built from the keys and values from this Map.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toVector", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.toVector.php )\n * Returns a Vector built from the values of this Map.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmVector", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.toImmVector.php )\n * Returns a ImmVector built from the values of this Map.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toMap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.toMap.php )\n * Returns a copy of this Map.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmMap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.toImmMap.php )\n * Returns a ImmMap built from the keys and values of this Map.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toSet", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.toSet.php )\n * Returns a Set built from the values of this Map.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmSet", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.toImmSet.php )\n * Returns a ImmSet built from the values of this Map.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "immutable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.immutable.php )\n * Returns an immutable version of this collection.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "values", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.values.php )\n * Returns a Vector built from the values of this Map.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toKeysArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.toKeysArray.php )\n * Returns an array built from the keys from this Map.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toValuesArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.toValuesArray.php )\n * Returns an array built from the values from this Map.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "differenceByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.differenceByKey.php )\n *\n * @it mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "it", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "getIterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.getIterator.php )\n * Returns an iterator that points to beginning of this Map.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "map", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.map.php )\n * Returns a Map of the keys/values produced by applying the specified callback on each value from this Map.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "mapWithKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.mapWithKey.php )\n * Returns a Map of the keys/values produced by applying the specified callback on each key and value from this Map.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "filter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.filter.php )\n * Returns a new Map of all the keys/values from this Map for which the specified callback returns true.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "filterWithKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.filterWithKey.php )\n * Returns a new Map of all the keys/values from this Map for which the specified callback returns true.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "retain", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.retain.php )\n * Ensures that this Map contains only keys/values for which the specified callback returns true when passed the value.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "retainWithKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.retainWithKey.php )\n * Ensures that this Map contains only keys/values for which the specified callback returns true when passed the key and the value.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "zip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.zip.php )\n * Returns a KeyedIterable produced by combined the specified Iterables pair-wise.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "take", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.take.php )\n * Returns a Map containing the first n key/value pairs of this Map.\n *\n * @n mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "n", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "takeWhile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.takeWhile.php )\n * Returns a Map containing the key/value pairs of this Map up to but not including the first value that produces false when passed to the specified callback.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "skip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.skip.php )\n * Returns a Map containing all key/value pairs except the first n of this Map.\n *\n * @n mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "n", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "skipWhile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.skipWhile.php )\n * Returns a Map containing the key/value pairs of this Map excluding the first values that produces true when passed to the specified callback.\n *\n * @fn mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "fn", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "slice", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.slice.php )\n * Returns a Map containing the specified range of key/value pairs from this Map. The range is specified by two non-negative integers: a starting position and a length.\n *\n * @start mixed \n * @len mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "start", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "concat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.concat.php )\n * Builds a new Vector by concatenating the values of this Map with the elements of the specified Iterable. Note that this ignores the keys of this Map and the specified Iterable.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "firstValue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.firstValue.php )\n * Returns the first value from this Map, or null if this Map is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "firstKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.firstKey.php )\n * Returns the first key from this Map, or null if this Map is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lastValue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.lastValue.php )\n * Returns the last value from this Map, or null if this Map is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lastKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.lastKey.php )\n * Returns the last key from this Map, or null if this Map is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__toString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.--toString.php )\n *\n * @return String \n */",
  (const char *)0x22,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.--get.php )\n *\n * @name  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.--set.php )\n *\n * @name  \n * @value  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.--isset.php )\n *\n * @name  \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__unset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.--unset.php )\n *\n * @name  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002240, "fromItems", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.fromItems.php )\n * Returns a Map built from the key/value Pairs produced by the specified Iterable.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002240, "fromArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Map.fromArray.php )\n * Returns a Map built from the keys and values from the specified array.\n *\n * @mp mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "mp", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x1800a020, "HH\\ImmMap", "", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.HH\\ImmMap.php )\n * An immutable ordered dictionary-style collection.\n *\n */",
  "constmap", NULL,
  (const char *)0x10002040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.--construct.php )\n * Returns a ImmMap built from the keys and values produced by the specified KeyedIterable.\n *\n * @iterable mixed \n *\n */",
  (const char *)0x1,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "N;", (const char*)2, "null", (const char*)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "isEmpty", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.isEmpty.php )\n * Returns true if the ImmMap is empty, false otherwise.\n *\n * @return bool \n */",
  (const char *)0x9,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.count.php )\n * Returns the number of key/value pairs in the ImmMap.\n *\n * @return int64_t \n */",
  (const char *)0x11,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "items", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.items.php )\n * Returns an Iterable that produces the key/value Pairs from this ImmMap.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "keys", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.keys.php )\n * Returns a ImmVector built from the keys of this ImmMap.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lazy", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.lazy.php )\n * Returns a lazy iterable view of this ImmMap.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "at", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.at.php )\n * Returns the value at the specified key. If the key is not present, an exception is thrown.\n *\n * @key mixed \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.get.php )\n * Returns the value at the specified key. If the key is not present, null is returned.\n *\n * @key mixed \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "contains", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.contains.php )\n * Returns true if the specified key is present in the ImmMap, false otherwise.\n *\n * @key mixed \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "containsKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.containsKey.php )\n * Returns true if the specified key is present in the ImmMap, false otherwise.\n *\n * @key mixed \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "key", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.toArray.php )\n * Returns an array built from the keys and values from this ImmMap.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toVector", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.toVector.php )\n * Returns a Vector built from the values of this ImmMap.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmVector", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.toImmVector.php )\n * Returns a ImmVector built from the values of this ImmMap.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toMap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.toMap.php )\n * Returns a Map built from the keys and values of this ImmMap.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmMap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.toImmMap.php )\n * Returns an immutable version of this collection.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toSet", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.toSet.php )\n * Returns a Set built from the values of this ImmMap.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmSet", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.toImmSet.php )\n * Returns a ImmSet built from the values of this ImmMap.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "immutable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.immutable.php )\n * Returns an immutable version of this collection.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "values", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.values.php )\n * Returns a ImmVector built from the values of this ImmMap.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toKeysArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.toKeysArray.php )\n * Returns an array built from the keys from this ImmMap.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toValuesArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.toValuesArray.php )\n * Returns an array built from the values from this ImmMap.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "differenceByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.differenceByKey.php )\n *\n * @it mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "it", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "getIterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.getIterator.php )\n * Returns an iterator that points to beginning of this ImmMap.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "map", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.map.php )\n * Returns a ImmMap of the keys/values produced by applying the specified callback on each value from this ImmMap.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "mapWithKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.mapWithKey.php )\n * Returns a ImmMap of the keys/values produced by applying the specified callback on each key and value from this ImmMap.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "filter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.filter.php )\n * Returns a ImmMap of all the keys/values from this ImmMap for which the specified callback returns true.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "filterWithKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.filterWithKey.php )\n * Returns a ImmMap of all the keys/values from this ImmMap for which the specified callback returns true.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "zip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.zip.php )\n * Returns a KeyedIterable produced by combined the specified Iterables pair-wise.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "take", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.take.php )\n * Returns a ImmMap containing the first n key/value pairs of this ImmMap.\n *\n * @n mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "n", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "takeWhile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.takeWhile.php )\n * Returns a ImmMap containing the key/value pairs of this ImmMap up to but not including the first value that produces false when passed to the specified callback.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "skip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.skip.php )\n * Returns a ImmMap containing all key/value pairs except the first n of this ImmMap.\n *\n * @n mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "n", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "skipWhile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.skipWhile.php )\n * Returns a ImmMap containing the key/value pairs of this ImmMap excluding the first values that produces true when passed to the specified callback.\n *\n * @fn mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "fn", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "slice", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.slice.php )\n * Returns a ImmMap containing the specified range of key/value pairs from this ImmMap. The range is specified by two non-negative integers: a starting position and a length.\n *\n * @start mixed \n * @len mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "start", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "concat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.concat.php )\n * Builds a new ImmVector by concatenating the values of this ImmMap with the elements of the specified Iterable. Note that this ignores the keys of this ImmMap and the specified Iterable.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "firstValue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.firstValue.php )\n * Returns the first value from this ImmMap, or null if this ImmMap is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "firstKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.firstKey.php )\n * Returns the first key from this ImmMap, or null if this ImmMap is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lastValue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.lastValue.php )\n * Returns the last value from this ImmMap, or null if this ImmMap is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lastKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.lastKey.php )\n * Returns the last key from this ImmMap, or null if this ImmMap is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__toString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.--toString.php )\n *\n * @return String \n */",
  (const char *)0x22,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.--get.php )\n *\n * @name  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.--set.php )\n *\n * @name  \n * @value  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.--isset.php )\n *\n * @name  \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__unset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.--unset.php )\n *\n * @name  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002240, "fromItems", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmMap.fromItems.php )\n * Returns a ImmMap built from the key/value Pairs produced by the specified Iterable.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x1800a020, "HH\\Set", "", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.HH\\Set.php )\n * An ordered set-style collection.\n *\n */",
  "mutableset", NULL,
  (const char *)0x10002040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.--construct.php )\n * Returns a Set built from the values produced by the specified Iterable.\n *\n * @iterable mixed \n *\n */",
  (const char *)0x1,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "N;", (const char*)2, "null", (const char*)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "isEmpty", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.isEmpty.php )\n * Returns true if the Set is empty, false otherwise.\n *\n * @return bool \n */",
  (const char *)0x9,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.count.php )\n * Returns the number of values in the Set.\n *\n * @return int64_t \n */",
  (const char *)0x11,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "items", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.items.php )\n * Returns an Iterable that produces the values from this Set.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "keys", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.keys.php )\n * Returns a Vector built from the keys of this Set.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "values", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.values.php )\n * Returns a Vector built from the values of this Set.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lazy", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.lazy.php )\n * Returns a lazy iterable view of this Set.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "clear", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.clear.php )\n * Removes all values from the Set.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "contains", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.contains.php )\n * Returns true if the specified value is present in the Set, returns false otherwise.\n *\n * @val mixed \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "val", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "remove", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.remove.php )\n * Removes the specified value from this Set.\n *\n * @val mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "val", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.add.php )\n * Adds the specified value to this Set.\n *\n * @val mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "val", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "addAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.addAll.php )\n * Adds the values produced by the specified Iterable to this Set.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "addAllKeysOf", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.addAllKeysOf.php )\n * Adds the keys of the specified KeyedContainer to this Set.\n *\n * @container mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "container", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "reserve", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.reserve.php )\n * Instructs this Set to grow its capacity to accommodate the given number of elements. The caller is expected to make the appropriate add/addAll calls to fill that reserved capacity.\n *\n * @sz mixed \n *\n */",
  (const char *)0x1,
  (const char *)0x2000, "sz", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.toArray.php )\n * Returns an array built from the values from this Set, array(val1 => val1, val2 => val2, ...). This maintains set-like semantics in array() land: O(1) membership test with `array_has_key($a['key'])` and iteration with `foreach($a as $member)`. Int-like strings end up with numerical array keys.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toVector", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.toVector.php )\n * Returns a Vector built from the values of this Set.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmVector", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.toImmVector.php )\n * Returns a ImmVector built from the values of this Set.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toMap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.toMap.php )\n * Returns a Map built from the keys and values of this Set.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmMap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.toImmMap.php )\n * Returns a ImmMap built from the keys and values of this Set.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toSet", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.toSet.php )\n * Returns a copy of this Set.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmSet", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.toImmSet.php )\n * Returns a ImmSet built from the values of this Set.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "immutable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.immutable.php )\n * Returns an immutable version of this collection.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toKeysArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.toKeysArray.php )\n * Returns an array built from the values from this Set.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toValuesArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.toValuesArray.php )\n * Returns an array built from the values from this Set.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "getIterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.getIterator.php )\n * Returns an iterator that points to beginning of this Set.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "map", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.map.php )\n * Returns a Set of the values produced by applying the specified callback on each value from this Set.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "mapWithKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.mapWithKey.php )\n * Returns a Set of the values produced by applying the specified callback on each key and value from this Set.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "filter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.filter.php )\n * Returns a Set of all the values from this Set for which the specified callback returns true.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "filterWithKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.filterWithKey.php )\n * Returns a Set of all the values from this Set for which the specified callback returns true.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "retain", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.retain.php )\n * Ensures that this Set contains only values for which the specified callback returns true.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "retainWithKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.retainWithKey.php )\n * Ensures that this Set contains only keys/values for which the specified callback returns true when passed the key and the value.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "zip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.zip.php )\n * Returns a Iterable produced by combined the specified Iterables pair-wise.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "take", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.take.php )\n * Returns a Set containing the first n values of this Set.\n *\n * @n mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "n", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "takeWhile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.takeWhile.php )\n * Returns a Set containing the values of this Set up to but not including the first value that produces false when passed to the specified callback.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "skip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.skip.php )\n * Returns a Set containing all values except the first n of this Set.\n *\n * @n mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "n", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "skipWhile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.skipWhile.php )\n * Returns a Set containing all the values of this Set excluding the first values that produces true when passed to the specified callback.\n *\n * @fn mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "fn", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "slice", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.slice.php )\n * Returns a Set containing the specified range of values from this Set. The range is specified by two non-negative integers: a starting position and a length.\n *\n * @start mixed \n * @len mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "start", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "concat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.concat.php )\n * Builds a new Vector by concatenating the elements of this Set with the elements of the specified Iterable.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "firstValue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.firstValue.php )\n * Returns the first value from this Set, or null if this Set is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "firstKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.firstKey.php )\n * Returns the first key from this Set, or null if this Vector is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lastValue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.lastValue.php )\n * Returns the last value from this Set, or null if this Set is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lastKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.lastKey.php )\n * Returns the last key from this Set, or null if this Set is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "removeAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.removeAll.php )\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "difference", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.difference.php )\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__toString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.--toString.php )\n *\n * @return String \n */",
  (const char *)0x22,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.--get.php )\n *\n * @name  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.--set.php )\n *\n * @name  \n * @value  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.--isset.php )\n *\n * @name  \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__unset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.--unset.php )\n *\n * @name  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002240, "fromItems", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.fromItems.php )\n * Returns a Set built from the values produced by the specified Iterable.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002240, "fromKeysOf", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.fromKeysOf.php )\n * Returns a Set built from the keys of the specified container.\n *\n * @container mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "container", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002240, "fromArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.fromArray.php )\n * Returns a Set built from the values from the specified array.\n *\n * @arr mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "arr", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10022240, "fromArrays", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/Set.fromArrays.php )\n * Returns a Set built from the values from the specified arrays.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x1800a020, "HH\\ImmSet", "", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.HH\\ImmSet.php )\n * An immutable ordered set-style collection.\n *\n */",
  "constset", NULL,
  (const char *)0x10002040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.--construct.php )\n * Returns a ImmSet built from the values produced by the specified Iterable.\n *\n * @iterable mixed \n *\n */",
  (const char *)0x1,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "N;", (const char*)2, "null", (const char*)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "isEmpty", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.isEmpty.php )\n * Returns true if the ImmSet is empty, false otherwise.\n *\n * @return bool \n */",
  (const char *)0x9,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.count.php )\n * Returns the number of values in the ImmSet.\n *\n * @return int64_t \n */",
  (const char *)0x11,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "items", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.items.php )\n * Returns an Iterable that produces the values from this ImmSet.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "keys", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.keys.php )\n * Returns a Vector built from the keys of this ImmSet.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "values", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.values.php )\n * Returns a ImmVector built from the values of this ImmSet.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lazy", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.lazy.php )\n * Returns a lazy iterable view of this ImmSet.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "contains", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.contains.php )\n * Returns true if the specified value is present in the ImmSet, returns false otherwise.\n *\n * @val mixed \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "val", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.toArray.php )\n * Returns an array built from the values from this ImmSet, array(val1 => val1, val2 => val2, ...). This maintains set-like semantics in array() land: O(1) membership test with `array_has_key($a['key'])` and iteration with `foreach($a as $member)`. Int-like strings end up with numerical array keys.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toVector", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.toVector.php )\n * Returns a Vector built from the values of this ImmSet.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmVector", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.toImmVector.php )\n * Returns a ImmVector built from the values of this ImmSet.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toMap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.toMap.php )\n * Returns a Map built from the keys and values of this ImmSet.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmMap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.toImmMap.php )\n * Returns a ImmMap built from the keys and values of this ImmSet.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toSet", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.toSet.php )\n * Returns a Set built from the values of this ImmSet.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toImmSet", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.toImmSet.php )\n * Returns an immutable version of this collection.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "immutable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.immutable.php )\n * Returns an immutable version of this collection.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toKeysArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.toKeysArray.php )\n * Returns an array built from the values from this ImmSet.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "toValuesArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.toValuesArray.php )\n * Returns an array built from the values from this ImmSet.\n *\n * @return Array \n */",
  (const char *)0x34,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "getIterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.getIterator.php )\n * Returns an iterator that points to beginning of this ImmSet.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "map", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.map.php )\n * Returns a ImmSet of the values produced by applying the specified callback on each value from this ImmSet.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "mapWithKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.mapWithKey.php )\n * Returns a ImmSet of the values produced by applying the specified callback on each key and value from this ImmSet.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "filter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.filter.php )\n * Returns a ImmSet of all the values from this ImmSet for which the specified callback returns true.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "filterWithKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.filterWithKey.php )\n * Returns a ImmSet of all the values from this ImmSet for which the specified callback returns true.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "zip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.zip.php )\n * Returns an Iterable produced by combining the specified Iterables pair-wise.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "take", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.take.php )\n * Returns a ImmSet containing the first n values of this ImmSet.\n *\n * @n mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "n", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "takeWhile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.takeWhile.php )\n * Returns a ImmSet containing the values of this ImmSet up to but not including the first value that produces false when passed to the specified callback.\n *\n * @callback mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "skip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.skip.php )\n * Returns a ImmSet containing all values except the first n of this ImmSet.\n *\n * @n mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "n", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "skipWhile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.skipWhile.php )\n * Returns a ImmSet containing all the values of this ImmSet excluding the first values that produces true when passed to the specified callback.\n *\n * @fn mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "fn", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "slice", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.slice.php )\n * Returns a ImmSet containing the specified range of values from this ImmSet. The range is specified by two non-negative integers: a starting position and a length.\n *\n * @start mixed \n * @len mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "start", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "concat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.concat.php )\n * Builds a new ImmVector by concatenating the elements of this ImmSet with the elements of the specified Iterable.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "firstValue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.firstValue.php )\n * Returns the first value from this ImmSet, or null if this ImmSet is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "firstKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.firstKey.php )\n * Returns the first key from this ImmSet, or null if this ImmSet is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lastValue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.lastValue.php )\n * Returns the last value from this ImmSet, or null if this ImmSet is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "lastKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.lastKey.php )\n * Returns the last key from this ImmSet, or null if this ImmSet is empty.\n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__toString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.--toString.php )\n *\n * @return String \n */",
  (const char *)0x22,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.--get.php )\n *\n * @name  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.--set.php )\n *\n * @name  \n * @value  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.--isset.php )\n *\n * @name  \n *\n * @return bool \n */",
  (const char *)0x9,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002040, "__unset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.--unset.php )\n *\n * @name  \n *\n * @return mixed \n */",
  (const char *)0xffffffff,
  (const char *)0x2000, "name", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002240, "fromItems", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.fromItems.php )\n * Returns a ImmSet built from the values produced by the specified Iterable.\n *\n * @iterable mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "iterable", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10002240, "fromKeysOf", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.fromKeysOf.php )\n * Returns a ImmSet built from the keys of the specified container.\n *\n * @container mixed \n *\n * @return Object \n */",
  (const char *)0x40,
  (const char *)0x2000, "container", "", (const char *)0xffffffff,
    "", (const char*)0, "", (const char*)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10022240, "fromArrays", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/ImmSet.fromArrays.php )\n * Returns a ImmSet built from the values from the specified arrays.\n *\n * @return Object \n */",
  (const char *)0x40,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
};
} // namespace HPHP
