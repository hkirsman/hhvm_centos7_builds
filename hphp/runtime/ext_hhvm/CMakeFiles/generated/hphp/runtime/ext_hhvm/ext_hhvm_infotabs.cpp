//
// AUTOMATICALLY GENERATED: DO NOT EDIT
// @generated by gen-infotabs.cpp
// ../../tools/bootstrap/gen-infotabs
//   /tmp/hhvm-3.11.1/hphp/runtime/ext_hhvm/CMakeFiles/generated/hphp/runtime/ext_hhvm//ext_hhvm_infotabs.cpp
//   /tmp/hhvm-3.11.1/hphp/runtime/ext_hhvm/CMakeFiles/generated/hphp/runtime/ext_hhvm//ext_hhvm_infotabs.h
//   /tmp/hhvm-3.11.1/hphp/runtime/ext_hhvm/../../system/idl/closure.idl.json
//   /tmp/hhvm-3.11.1/hphp/runtime/ext_hhvm/../../system/idl/collections.idl.json
//   /tmp/hhvm-3.11.1/hphp/runtime/ext_hhvm/../../system/idl/constants.idl.json
//
#include "hphp/runtime/ext_hhvm/ext_hhvm.h"
#include "hphp/runtime/ext/ext.h"
#include "hphp/runtime/vm/runtime.h"
#include "/tmp/hhvm-3.11.1/hphp/runtime/ext_hhvm/CMakeFiles/generated/hphp/runtime/ext_hhvm//ext_hhvm_infotabs.h"
#include "hphp/util/abi-cxx.h"
namespace HPHP {
  struct TypedValue;
  struct ActRec;
  class Class;


ObjectData* new_Closure_Instance(Class*);
TypedValue* tg_7Closure___construct(ActRec* ar);
TypedValue* tg_7Closure___debuginfo(ActRec* ar);
TypedValue* tg_7Closure___get(ActRec* ar);
TypedValue* tg_7Closure___set(ActRec* ar);
TypedValue* tg_7Closure___isset(ActRec* ar);
TypedValue* tg_7Closure___unset(ActRec* ar);
TypedValue* tg_7Closure_bind(ActRec* ar);
TypedValue* tg_7Closure_bindto(ActRec* ar);
TypedValue* tg_7Closure_call(ActRec* ar);
ObjectData* new_Vector_Instance(Class*);
TypedValue* tg_6Vector___construct(ActRec* ar);
TypedValue* tg_6Vector_isEmpty(ActRec* ar);
TypedValue* tg_6Vector_count(ActRec* ar);
TypedValue* tg_6Vector_items(ActRec* ar);
TypedValue* tg_6Vector_keys(ActRec* ar);
TypedValue* tg_6Vector_values(ActRec* ar);
TypedValue* tg_6Vector_lazy(ActRec* ar);
TypedValue* tg_6Vector_at(ActRec* ar);
TypedValue* tg_6Vector_get(ActRec* ar);
TypedValue* tg_6Vector_set(ActRec* ar);
TypedValue* tg_6Vector_setAll(ActRec* ar);
TypedValue* tg_6Vector_clear(ActRec* ar);
TypedValue* tg_6Vector_contains(ActRec* ar);
TypedValue* tg_6Vector_containsKey(ActRec* ar);
TypedValue* tg_6Vector_removeKey(ActRec* ar);
TypedValue* tg_6Vector_append(ActRec* ar);
TypedValue* tg_6Vector_add(ActRec* ar);
TypedValue* tg_6Vector_addAll(ActRec* ar);
TypedValue* tg_6Vector_addAllKeysOf(ActRec* ar);
TypedValue* tg_6Vector_pop(ActRec* ar);
TypedValue* tg_6Vector_resize(ActRec* ar);
TypedValue* tg_6Vector_reserve(ActRec* ar);
TypedValue* tg_6Vector_toArray(ActRec* ar);
TypedValue* tg_6Vector_toVector(ActRec* ar);
TypedValue* tg_6Vector_toImmVector(ActRec* ar);
TypedValue* tg_6Vector_immutable(ActRec* ar);
TypedValue* tg_6Vector_toMap(ActRec* ar);
TypedValue* tg_6Vector_toImmMap(ActRec* ar);
TypedValue* tg_6Vector_toSet(ActRec* ar);
TypedValue* tg_6Vector_toImmSet(ActRec* ar);
TypedValue* tg_6Vector_toKeysArray(ActRec* ar);
TypedValue* tg_6Vector_toValuesArray(ActRec* ar);
TypedValue* tg_6Vector_getIterator(ActRec* ar);
TypedValue* tg_6Vector_map(ActRec* ar);
TypedValue* tg_6Vector_mapWithKey(ActRec* ar);
TypedValue* tg_6Vector_filter(ActRec* ar);
TypedValue* tg_6Vector_filterWithKey(ActRec* ar);
TypedValue* tg_6Vector_zip(ActRec* ar);
TypedValue* tg_6Vector_take(ActRec* ar);
TypedValue* tg_6Vector_takeWhile(ActRec* ar);
TypedValue* tg_6Vector_skip(ActRec* ar);
TypedValue* tg_6Vector_skipWhile(ActRec* ar);
TypedValue* tg_6Vector_slice(ActRec* ar);
TypedValue* tg_6Vector_concat(ActRec* ar);
TypedValue* tg_6Vector_firstValue(ActRec* ar);
TypedValue* tg_6Vector_firstKey(ActRec* ar);
TypedValue* tg_6Vector_lastValue(ActRec* ar);
TypedValue* tg_6Vector_lastKey(ActRec* ar);
TypedValue* tg_6Vector_reverse(ActRec* ar);
TypedValue* tg_6Vector_splice(ActRec* ar);
TypedValue* tg_6Vector_linearSearch(ActRec* ar);
TypedValue* tg_6Vector_shuffle(ActRec* ar);
TypedValue* tg_6Vector___toString(ActRec* ar);
TypedValue* tg_6Vector___get(ActRec* ar);
TypedValue* tg_6Vector___set(ActRec* ar);
TypedValue* tg_6Vector___isset(ActRec* ar);
TypedValue* tg_6Vector___unset(ActRec* ar);
TypedValue* tg_6Vector_fromItems(ActRec* ar);
TypedValue* tg_6Vector_fromKeysOf(ActRec* ar);
TypedValue* tg_6Vector_fromArray(ActRec* ar);
ObjectData* new_ImmVector_Instance(Class*);
TypedValue* tg_9ImmVector___construct(ActRec* ar);
TypedValue* tg_9ImmVector_fromItems(ActRec* ar);
TypedValue* tg_9ImmVector_fromKeysOf(ActRec* ar);
TypedValue* tg_9ImmVector_isEmpty(ActRec* ar);
TypedValue* tg_9ImmVector_count(ActRec* ar);
TypedValue* tg_9ImmVector_items(ActRec* ar);
TypedValue* tg_9ImmVector_containsKey(ActRec* ar);
TypedValue* tg_9ImmVector_at(ActRec* ar);
TypedValue* tg_9ImmVector_get(ActRec* ar);
TypedValue* tg_9ImmVector_getIterator(ActRec* ar);
TypedValue* tg_9ImmVector_map(ActRec* ar);
TypedValue* tg_9ImmVector_mapWithKey(ActRec* ar);
TypedValue* tg_9ImmVector_filter(ActRec* ar);
TypedValue* tg_9ImmVector_filterWithKey(ActRec* ar);
TypedValue* tg_9ImmVector_zip(ActRec* ar);
TypedValue* tg_9ImmVector_take(ActRec* ar);
TypedValue* tg_9ImmVector_takeWhile(ActRec* ar);
TypedValue* tg_9ImmVector_skip(ActRec* ar);
TypedValue* tg_9ImmVector_skipWhile(ActRec* ar);
TypedValue* tg_9ImmVector_slice(ActRec* ar);
TypedValue* tg_9ImmVector_concat(ActRec* ar);
TypedValue* tg_9ImmVector_firstValue(ActRec* ar);
TypedValue* tg_9ImmVector_firstKey(ActRec* ar);
TypedValue* tg_9ImmVector_lastValue(ActRec* ar);
TypedValue* tg_9ImmVector_lastKey(ActRec* ar);
TypedValue* tg_9ImmVector_keys(ActRec* ar);
TypedValue* tg_9ImmVector___toString(ActRec* ar);
TypedValue* tg_9ImmVector___get(ActRec* ar);
TypedValue* tg_9ImmVector___set(ActRec* ar);
TypedValue* tg_9ImmVector___isset(ActRec* ar);
TypedValue* tg_9ImmVector___unset(ActRec* ar);
TypedValue* tg_9ImmVector_toVector(ActRec* ar);
TypedValue* tg_9ImmVector_toImmVector(ActRec* ar);
TypedValue* tg_9ImmVector_toMap(ActRec* ar);
TypedValue* tg_9ImmVector_toImmMap(ActRec* ar);
TypedValue* tg_9ImmVector_toSet(ActRec* ar);
TypedValue* tg_9ImmVector_toImmSet(ActRec* ar);
TypedValue* tg_9ImmVector_immutable(ActRec* ar);
TypedValue* tg_9ImmVector_values(ActRec* ar);
TypedValue* tg_9ImmVector_lazy(ActRec* ar);
TypedValue* tg_9ImmVector_toArray(ActRec* ar);
TypedValue* tg_9ImmVector_toKeysArray(ActRec* ar);
TypedValue* tg_9ImmVector_toValuesArray(ActRec* ar);
TypedValue* tg_9ImmVector_linearSearch(ActRec* ar);
ObjectData* new_Map_Instance(Class*);
TypedValue* tg_3Map___construct(ActRec* ar);
TypedValue* tg_3Map_isEmpty(ActRec* ar);
TypedValue* tg_3Map_count(ActRec* ar);
TypedValue* tg_3Map_items(ActRec* ar);
TypedValue* tg_3Map_keys(ActRec* ar);
TypedValue* tg_3Map_lazy(ActRec* ar);
TypedValue* tg_3Map_at(ActRec* ar);
TypedValue* tg_3Map_get(ActRec* ar);
TypedValue* tg_3Map_set(ActRec* ar);
TypedValue* tg_3Map_setAll(ActRec* ar);
TypedValue* tg_3Map_clear(ActRec* ar);
TypedValue* tg_3Map_contains(ActRec* ar);
TypedValue* tg_3Map_containsKey(ActRec* ar);
TypedValue* tg_3Map_remove(ActRec* ar);
TypedValue* tg_3Map_removeKey(ActRec* ar);
TypedValue* tg_3Map_add(ActRec* ar);
TypedValue* tg_3Map_addAll(ActRec* ar);
TypedValue* tg_3Map_reserve(ActRec* ar);
TypedValue* tg_3Map_toArray(ActRec* ar);
TypedValue* tg_3Map_toVector(ActRec* ar);
TypedValue* tg_3Map_toImmVector(ActRec* ar);
TypedValue* tg_3Map_toMap(ActRec* ar);
TypedValue* tg_3Map_toImmMap(ActRec* ar);
TypedValue* tg_3Map_toSet(ActRec* ar);
TypedValue* tg_3Map_toImmSet(ActRec* ar);
TypedValue* tg_3Map_immutable(ActRec* ar);
TypedValue* tg_3Map_values(ActRec* ar);
TypedValue* tg_3Map_toKeysArray(ActRec* ar);
TypedValue* tg_3Map_toValuesArray(ActRec* ar);
TypedValue* tg_3Map_differenceByKey(ActRec* ar);
TypedValue* tg_3Map_getIterator(ActRec* ar);
TypedValue* tg_3Map_map(ActRec* ar);
TypedValue* tg_3Map_mapWithKey(ActRec* ar);
TypedValue* tg_3Map_filter(ActRec* ar);
TypedValue* tg_3Map_filterWithKey(ActRec* ar);
TypedValue* tg_3Map_retain(ActRec* ar);
TypedValue* tg_3Map_retainWithKey(ActRec* ar);
TypedValue* tg_3Map_zip(ActRec* ar);
TypedValue* tg_3Map_take(ActRec* ar);
TypedValue* tg_3Map_takeWhile(ActRec* ar);
TypedValue* tg_3Map_skip(ActRec* ar);
TypedValue* tg_3Map_skipWhile(ActRec* ar);
TypedValue* tg_3Map_slice(ActRec* ar);
TypedValue* tg_3Map_concat(ActRec* ar);
TypedValue* tg_3Map_firstValue(ActRec* ar);
TypedValue* tg_3Map_firstKey(ActRec* ar);
TypedValue* tg_3Map_lastValue(ActRec* ar);
TypedValue* tg_3Map_lastKey(ActRec* ar);
TypedValue* tg_3Map___toString(ActRec* ar);
TypedValue* tg_3Map___get(ActRec* ar);
TypedValue* tg_3Map___set(ActRec* ar);
TypedValue* tg_3Map___isset(ActRec* ar);
TypedValue* tg_3Map___unset(ActRec* ar);
TypedValue* tg_3Map_fromItems(ActRec* ar);
TypedValue* tg_3Map_fromArray(ActRec* ar);
ObjectData* new_ImmMap_Instance(Class*);
TypedValue* tg_6ImmMap___construct(ActRec* ar);
TypedValue* tg_6ImmMap_isEmpty(ActRec* ar);
TypedValue* tg_6ImmMap_count(ActRec* ar);
TypedValue* tg_6ImmMap_items(ActRec* ar);
TypedValue* tg_6ImmMap_keys(ActRec* ar);
TypedValue* tg_6ImmMap_lazy(ActRec* ar);
TypedValue* tg_6ImmMap_at(ActRec* ar);
TypedValue* tg_6ImmMap_get(ActRec* ar);
TypedValue* tg_6ImmMap_contains(ActRec* ar);
TypedValue* tg_6ImmMap_containsKey(ActRec* ar);
TypedValue* tg_6ImmMap_toArray(ActRec* ar);
TypedValue* tg_6ImmMap_toVector(ActRec* ar);
TypedValue* tg_6ImmMap_toImmVector(ActRec* ar);
TypedValue* tg_6ImmMap_toMap(ActRec* ar);
TypedValue* tg_6ImmMap_toImmMap(ActRec* ar);
TypedValue* tg_6ImmMap_toSet(ActRec* ar);
TypedValue* tg_6ImmMap_toImmSet(ActRec* ar);
TypedValue* tg_6ImmMap_immutable(ActRec* ar);
TypedValue* tg_6ImmMap_values(ActRec* ar);
TypedValue* tg_6ImmMap_toKeysArray(ActRec* ar);
TypedValue* tg_6ImmMap_toValuesArray(ActRec* ar);
TypedValue* tg_6ImmMap_differenceByKey(ActRec* ar);
TypedValue* tg_6ImmMap_getIterator(ActRec* ar);
TypedValue* tg_6ImmMap_map(ActRec* ar);
TypedValue* tg_6ImmMap_mapWithKey(ActRec* ar);
TypedValue* tg_6ImmMap_filter(ActRec* ar);
TypedValue* tg_6ImmMap_filterWithKey(ActRec* ar);
TypedValue* tg_6ImmMap_zip(ActRec* ar);
TypedValue* tg_6ImmMap_take(ActRec* ar);
TypedValue* tg_6ImmMap_takeWhile(ActRec* ar);
TypedValue* tg_6ImmMap_skip(ActRec* ar);
TypedValue* tg_6ImmMap_skipWhile(ActRec* ar);
TypedValue* tg_6ImmMap_slice(ActRec* ar);
TypedValue* tg_6ImmMap_concat(ActRec* ar);
TypedValue* tg_6ImmMap_firstValue(ActRec* ar);
TypedValue* tg_6ImmMap_firstKey(ActRec* ar);
TypedValue* tg_6ImmMap_lastValue(ActRec* ar);
TypedValue* tg_6ImmMap_lastKey(ActRec* ar);
TypedValue* tg_6ImmMap___toString(ActRec* ar);
TypedValue* tg_6ImmMap___get(ActRec* ar);
TypedValue* tg_6ImmMap___set(ActRec* ar);
TypedValue* tg_6ImmMap___isset(ActRec* ar);
TypedValue* tg_6ImmMap___unset(ActRec* ar);
TypedValue* tg_6ImmMap_fromItems(ActRec* ar);
ObjectData* new_Set_Instance(Class*);
TypedValue* tg_3Set___construct(ActRec* ar);
TypedValue* tg_3Set_isEmpty(ActRec* ar);
TypedValue* tg_3Set_count(ActRec* ar);
TypedValue* tg_3Set_items(ActRec* ar);
TypedValue* tg_3Set_keys(ActRec* ar);
TypedValue* tg_3Set_values(ActRec* ar);
TypedValue* tg_3Set_lazy(ActRec* ar);
TypedValue* tg_3Set_clear(ActRec* ar);
TypedValue* tg_3Set_contains(ActRec* ar);
TypedValue* tg_3Set_remove(ActRec* ar);
TypedValue* tg_3Set_add(ActRec* ar);
TypedValue* tg_3Set_addAll(ActRec* ar);
TypedValue* tg_3Set_addAllKeysOf(ActRec* ar);
TypedValue* tg_3Set_reserve(ActRec* ar);
TypedValue* tg_3Set_toArray(ActRec* ar);
TypedValue* tg_3Set_toVector(ActRec* ar);
TypedValue* tg_3Set_toImmVector(ActRec* ar);
TypedValue* tg_3Set_toMap(ActRec* ar);
TypedValue* tg_3Set_toImmMap(ActRec* ar);
TypedValue* tg_3Set_toSet(ActRec* ar);
TypedValue* tg_3Set_toImmSet(ActRec* ar);
TypedValue* tg_3Set_immutable(ActRec* ar);
TypedValue* tg_3Set_toKeysArray(ActRec* ar);
TypedValue* tg_3Set_toValuesArray(ActRec* ar);
TypedValue* tg_3Set_getIterator(ActRec* ar);
TypedValue* tg_3Set_map(ActRec* ar);
TypedValue* tg_3Set_mapWithKey(ActRec* ar);
TypedValue* tg_3Set_filter(ActRec* ar);
TypedValue* tg_3Set_filterWithKey(ActRec* ar);
TypedValue* tg_3Set_retain(ActRec* ar);
TypedValue* tg_3Set_retainWithKey(ActRec* ar);
TypedValue* tg_3Set_zip(ActRec* ar);
TypedValue* tg_3Set_take(ActRec* ar);
TypedValue* tg_3Set_takeWhile(ActRec* ar);
TypedValue* tg_3Set_skip(ActRec* ar);
TypedValue* tg_3Set_skipWhile(ActRec* ar);
TypedValue* tg_3Set_slice(ActRec* ar);
TypedValue* tg_3Set_concat(ActRec* ar);
TypedValue* tg_3Set_firstValue(ActRec* ar);
TypedValue* tg_3Set_firstKey(ActRec* ar);
TypedValue* tg_3Set_lastValue(ActRec* ar);
TypedValue* tg_3Set_lastKey(ActRec* ar);
TypedValue* tg_3Set_removeAll(ActRec* ar);
TypedValue* tg_3Set_difference(ActRec* ar);
TypedValue* tg_3Set___toString(ActRec* ar);
TypedValue* tg_3Set___get(ActRec* ar);
TypedValue* tg_3Set___set(ActRec* ar);
TypedValue* tg_3Set___isset(ActRec* ar);
TypedValue* tg_3Set___unset(ActRec* ar);
TypedValue* tg_3Set_fromItems(ActRec* ar);
TypedValue* tg_3Set_fromKeysOf(ActRec* ar);
TypedValue* tg_3Set_fromArray(ActRec* ar);
TypedValue* tg_3Set_fromArrays(ActRec* ar);
ObjectData* new_ImmSet_Instance(Class*);
TypedValue* tg_6ImmSet___construct(ActRec* ar);
TypedValue* tg_6ImmSet_isEmpty(ActRec* ar);
TypedValue* tg_6ImmSet_count(ActRec* ar);
TypedValue* tg_6ImmSet_items(ActRec* ar);
TypedValue* tg_6ImmSet_keys(ActRec* ar);
TypedValue* tg_6ImmSet_values(ActRec* ar);
TypedValue* tg_6ImmSet_lazy(ActRec* ar);
TypedValue* tg_6ImmSet_contains(ActRec* ar);
TypedValue* tg_6ImmSet_toArray(ActRec* ar);
TypedValue* tg_6ImmSet_toVector(ActRec* ar);
TypedValue* tg_6ImmSet_toImmVector(ActRec* ar);
TypedValue* tg_6ImmSet_toMap(ActRec* ar);
TypedValue* tg_6ImmSet_toImmMap(ActRec* ar);
TypedValue* tg_6ImmSet_toSet(ActRec* ar);
TypedValue* tg_6ImmSet_toImmSet(ActRec* ar);
TypedValue* tg_6ImmSet_immutable(ActRec* ar);
TypedValue* tg_6ImmSet_toKeysArray(ActRec* ar);
TypedValue* tg_6ImmSet_toValuesArray(ActRec* ar);
TypedValue* tg_6ImmSet_getIterator(ActRec* ar);
TypedValue* tg_6ImmSet_map(ActRec* ar);
TypedValue* tg_6ImmSet_mapWithKey(ActRec* ar);
TypedValue* tg_6ImmSet_filter(ActRec* ar);
TypedValue* tg_6ImmSet_filterWithKey(ActRec* ar);
TypedValue* tg_6ImmSet_zip(ActRec* ar);
TypedValue* tg_6ImmSet_take(ActRec* ar);
TypedValue* tg_6ImmSet_takeWhile(ActRec* ar);
TypedValue* tg_6ImmSet_skip(ActRec* ar);
TypedValue* tg_6ImmSet_skipWhile(ActRec* ar);
TypedValue* tg_6ImmSet_slice(ActRec* ar);
TypedValue* tg_6ImmSet_concat(ActRec* ar);
TypedValue* tg_6ImmSet_firstValue(ActRec* ar);
TypedValue* tg_6ImmSet_firstKey(ActRec* ar);
TypedValue* tg_6ImmSet_lastValue(ActRec* ar);
TypedValue* tg_6ImmSet_lastKey(ActRec* ar);
TypedValue* tg_6ImmSet___toString(ActRec* ar);
TypedValue* tg_6ImmSet___get(ActRec* ar);
TypedValue* tg_6ImmSet___set(ActRec* ar);
TypedValue* tg_6ImmSet___isset(ActRec* ar);
TypedValue* tg_6ImmSet___unset(ActRec* ar);
TypedValue* tg_6ImmSet_fromItems(ActRec* ar);
TypedValue* tg_6ImmSet_fromKeysOf(ActRec* ar);
TypedValue* tg_6ImmSet_fromArrays(ActRec* ar);
ObjectData* new_Pair_Instance(Class*);
TypedValue* tg_4Pair___construct(ActRec* ar);
TypedValue* tg_4Pair_isEmpty(ActRec* ar);
TypedValue* tg_4Pair_count(ActRec* ar);
TypedValue* tg_4Pair_items(ActRec* ar);
TypedValue* tg_4Pair_keys(ActRec* ar);
TypedValue* tg_4Pair_values(ActRec* ar);
TypedValue* tg_4Pair_lazy(ActRec* ar);
TypedValue* tg_4Pair_toArray(ActRec* ar);
TypedValue* tg_4Pair_toVector(ActRec* ar);
TypedValue* tg_4Pair_toImmVector(ActRec* ar);
TypedValue* tg_4Pair_toMap(ActRec* ar);
TypedValue* tg_4Pair_toImmMap(ActRec* ar);
TypedValue* tg_4Pair_toSet(ActRec* ar);
TypedValue* tg_4Pair_toImmSet(ActRec* ar);
TypedValue* tg_4Pair_immutable(ActRec* ar);
TypedValue* tg_4Pair_toKeysArray(ActRec* ar);
TypedValue* tg_4Pair_toValuesArray(ActRec* ar);
TypedValue* tg_4Pair_getIterator(ActRec* ar);
TypedValue* tg_4Pair_map(ActRec* ar);
TypedValue* tg_4Pair_mapWithKey(ActRec* ar);
TypedValue* tg_4Pair_filter(ActRec* ar);
TypedValue* tg_4Pair_filterWithKey(ActRec* ar);
TypedValue* tg_4Pair_zip(ActRec* ar);
TypedValue* tg_4Pair_take(ActRec* ar);
TypedValue* tg_4Pair_takeWhile(ActRec* ar);
TypedValue* tg_4Pair_skip(ActRec* ar);
TypedValue* tg_4Pair_skipWhile(ActRec* ar);
TypedValue* tg_4Pair_linearSearch(ActRec* ar);
TypedValue* tg_4Pair_slice(ActRec* ar);
TypedValue* tg_4Pair_concat(ActRec* ar);
TypedValue* tg_4Pair_firstValue(ActRec* ar);
TypedValue* tg_4Pair_firstKey(ActRec* ar);
TypedValue* tg_4Pair_lastValue(ActRec* ar);
TypedValue* tg_4Pair_lastKey(ActRec* ar);
TypedValue* tg_4Pair_at(ActRec* ar);
TypedValue* tg_4Pair_get(ActRec* ar);
TypedValue* tg_4Pair_containsKey(ActRec* ar);
TypedValue* tg_4Pair___toString(ActRec* ar);
TypedValue* tg_4Pair___get(ActRec* ar);
TypedValue* tg_4Pair___set(ActRec* ar);
TypedValue* tg_4Pair___isset(ActRec* ar);
TypedValue* tg_4Pair___unset(ActRec* ar);

}
namespace HPHP {
const long long hhbc_ext_funcs_count = 0;
const HhbcExtFuncInfo hhbc_ext_funcs[] = {
    { }
};

static const long long hhbc_ext_method_count_Closure = 9;
static const HhbcExtMethodInfo hhbc_ext_methods_Closure[] = {
  { "__construct", tg_7Closure___construct, getMethodPtr(&HPHP::c_Closure::t___construct) },
  { "__debuginfo", tg_7Closure___debuginfo, getMethodPtr(&HPHP::c_Closure::t___debuginfo) },
  { "__get", tg_7Closure___get, getMethodPtr(&HPHP::c_Closure::t___get) },
  { "__set", tg_7Closure___set, getMethodPtr(&HPHP::c_Closure::t___set) },
  { "__isset", tg_7Closure___isset, getMethodPtr(&HPHP::c_Closure::t___isset) },
  { "__unset", tg_7Closure___unset, getMethodPtr(&HPHP::c_Closure::t___unset) },
  { "bind", tg_7Closure_bind, getMethodPtr(&HPHP::c_Closure::ti_bind) },
  { "bindto", tg_7Closure_bindto, getMethodPtr(&HPHP::c_Closure::t_bindto) },
  { "call", tg_7Closure_call, getMethodPtr(&HPHP::c_Closure::t_call) }
};

static const long long hhbc_ext_method_count_Vector = 60;
static const HhbcExtMethodInfo hhbc_ext_methods_Vector[] = {
  { "__construct", tg_6Vector___construct, getMethodPtr(&HPHP::c_Vector::t___construct) },
  { "isEmpty", tg_6Vector_isEmpty, getMethodPtr(&HPHP::c_Vector::t_isempty) },
  { "count", tg_6Vector_count, getMethodPtr(&HPHP::c_Vector::t_count) },
  { "items", tg_6Vector_items, getMethodPtr(&HPHP::c_Vector::t_items) },
  { "keys", tg_6Vector_keys, getMethodPtr(&HPHP::c_Vector::t_keys) },
  { "values", tg_6Vector_values, getMethodPtr(&HPHP::c_Vector::t_values) },
  { "lazy", tg_6Vector_lazy, getMethodPtr(&HPHP::c_Vector::t_lazy) },
  { "at", tg_6Vector_at, getMethodPtr(&HPHP::c_Vector::t_at) },
  { "get", tg_6Vector_get, getMethodPtr(&HPHP::c_Vector::t_get) },
  { "set", tg_6Vector_set, getMethodPtr(&HPHP::c_Vector::t_set) },
  { "setAll", tg_6Vector_setAll, getMethodPtr(&HPHP::c_Vector::t_setall) },
  { "clear", tg_6Vector_clear, getMethodPtr(&HPHP::c_Vector::t_clear) },
  { "contains", tg_6Vector_contains, getMethodPtr(&HPHP::c_Vector::t_contains) },
  { "containsKey", tg_6Vector_containsKey, getMethodPtr(&HPHP::c_Vector::t_containskey) },
  { "removeKey", tg_6Vector_removeKey, getMethodPtr(&HPHP::c_Vector::t_removekey) },
  { "append", tg_6Vector_append, getMethodPtr(&HPHP::c_Vector::t_append) },
  { "add", tg_6Vector_add, getMethodPtr(&HPHP::c_Vector::t_add) },
  { "addAll", tg_6Vector_addAll, getMethodPtr(&HPHP::c_Vector::t_addall) },
  { "addAllKeysOf", tg_6Vector_addAllKeysOf, getMethodPtr(&HPHP::c_Vector::t_addallkeysof) },
  { "pop", tg_6Vector_pop, getMethodPtr(&HPHP::c_Vector::t_pop) },
  { "resize", tg_6Vector_resize, getMethodPtr(&HPHP::c_Vector::t_resize) },
  { "reserve", tg_6Vector_reserve, getMethodPtr(&HPHP::c_Vector::t_reserve) },
  { "toArray", tg_6Vector_toArray, getMethodPtr(&HPHP::c_Vector::t_toarray) },
  { "toVector", tg_6Vector_toVector, getMethodPtr(&HPHP::c_Vector::t_tovector) },
  { "toImmVector", tg_6Vector_toImmVector, getMethodPtr(&HPHP::c_Vector::t_toimmvector) },
  { "immutable", tg_6Vector_immutable, getMethodPtr(&HPHP::c_Vector::t_immutable) },
  { "toMap", tg_6Vector_toMap, getMethodPtr(&HPHP::c_Vector::t_tomap) },
  { "toImmMap", tg_6Vector_toImmMap, getMethodPtr(&HPHP::c_Vector::t_toimmmap) },
  { "toSet", tg_6Vector_toSet, getMethodPtr(&HPHP::c_Vector::t_toset) },
  { "toImmSet", tg_6Vector_toImmSet, getMethodPtr(&HPHP::c_Vector::t_toimmset) },
  { "toKeysArray", tg_6Vector_toKeysArray, getMethodPtr(&HPHP::c_Vector::t_tokeysarray) },
  { "toValuesArray", tg_6Vector_toValuesArray, getMethodPtr(&HPHP::c_Vector::t_tovaluesarray) },
  { "getIterator", tg_6Vector_getIterator, getMethodPtr(&HPHP::c_Vector::t_getiterator) },
  { "map", tg_6Vector_map, getMethodPtr(&HPHP::c_Vector::t_map) },
  { "mapWithKey", tg_6Vector_mapWithKey, getMethodPtr(&HPHP::c_Vector::t_mapwithkey) },
  { "filter", tg_6Vector_filter, getMethodPtr(&HPHP::c_Vector::t_filter) },
  { "filterWithKey", tg_6Vector_filterWithKey, getMethodPtr(&HPHP::c_Vector::t_filterwithkey) },
  { "zip", tg_6Vector_zip, getMethodPtr(&HPHP::c_Vector::t_zip) },
  { "take", tg_6Vector_take, getMethodPtr(&HPHP::c_Vector::t_take) },
  { "takeWhile", tg_6Vector_takeWhile, getMethodPtr(&HPHP::c_Vector::t_takewhile) },
  { "skip", tg_6Vector_skip, getMethodPtr(&HPHP::c_Vector::t_skip) },
  { "skipWhile", tg_6Vector_skipWhile, getMethodPtr(&HPHP::c_Vector::t_skipwhile) },
  { "slice", tg_6Vector_slice, getMethodPtr(&HPHP::c_Vector::t_slice) },
  { "concat", tg_6Vector_concat, getMethodPtr(&HPHP::c_Vector::t_concat) },
  { "firstValue", tg_6Vector_firstValue, getMethodPtr(&HPHP::c_Vector::t_firstvalue) },
  { "firstKey", tg_6Vector_firstKey, getMethodPtr(&HPHP::c_Vector::t_firstkey) },
  { "lastValue", tg_6Vector_lastValue, getMethodPtr(&HPHP::c_Vector::t_lastvalue) },
  { "lastKey", tg_6Vector_lastKey, getMethodPtr(&HPHP::c_Vector::t_lastkey) },
  { "reverse", tg_6Vector_reverse, getMethodPtr(&HPHP::c_Vector::t_reverse) },
  { "splice", tg_6Vector_splice, getMethodPtr(&HPHP::c_Vector::t_splice) },
  { "linearSearch", tg_6Vector_linearSearch, getMethodPtr(&HPHP::c_Vector::t_linearsearch) },
  { "shuffle", tg_6Vector_shuffle, getMethodPtr(&HPHP::c_Vector::t_shuffle) },
  { "__toString", tg_6Vector___toString, getMethodPtr(&HPHP::c_Vector::t___tostring) },
  { "__get", tg_6Vector___get, getMethodPtr(&HPHP::c_Vector::t___get) },
  { "__set", tg_6Vector___set, getMethodPtr(&HPHP::c_Vector::t___set) },
  { "__isset", tg_6Vector___isset, getMethodPtr(&HPHP::c_Vector::t___isset) },
  { "__unset", tg_6Vector___unset, getMethodPtr(&HPHP::c_Vector::t___unset) },
  { "fromItems", tg_6Vector_fromItems, getMethodPtr(&HPHP::c_Vector::ti_fromitems) },
  { "fromKeysOf", tg_6Vector_fromKeysOf, getMethodPtr(&HPHP::c_Vector::ti_fromkeysof) },
  { "fromArray", tg_6Vector_fromArray, getMethodPtr(&HPHP::c_Vector::ti_fromarray) }
};

static const long long hhbc_ext_method_count_ImmVector = 44;
static const HhbcExtMethodInfo hhbc_ext_methods_ImmVector[] = {
  { "__construct", tg_9ImmVector___construct, getMethodPtr(&HPHP::c_ImmVector::t___construct) },
  { "fromItems", tg_9ImmVector_fromItems, getMethodPtr(&HPHP::c_ImmVector::ti_fromitems) },
  { "fromKeysOf", tg_9ImmVector_fromKeysOf, getMethodPtr(&HPHP::c_ImmVector::ti_fromkeysof) },
  { "isEmpty", tg_9ImmVector_isEmpty, getMethodPtr(&HPHP::c_ImmVector::t_isempty) },
  { "count", tg_9ImmVector_count, getMethodPtr(&HPHP::c_ImmVector::t_count) },
  { "items", tg_9ImmVector_items, getMethodPtr(&HPHP::c_ImmVector::t_items) },
  { "containsKey", tg_9ImmVector_containsKey, getMethodPtr(&HPHP::c_ImmVector::t_containskey) },
  { "at", tg_9ImmVector_at, getMethodPtr(&HPHP::c_ImmVector::t_at) },
  { "get", tg_9ImmVector_get, getMethodPtr(&HPHP::c_ImmVector::t_get) },
  { "getIterator", tg_9ImmVector_getIterator, getMethodPtr(&HPHP::c_ImmVector::t_getiterator) },
  { "map", tg_9ImmVector_map, getMethodPtr(&HPHP::c_ImmVector::t_map) },
  { "mapWithKey", tg_9ImmVector_mapWithKey, getMethodPtr(&HPHP::c_ImmVector::t_mapwithkey) },
  { "filter", tg_9ImmVector_filter, getMethodPtr(&HPHP::c_ImmVector::t_filter) },
  { "filterWithKey", tg_9ImmVector_filterWithKey, getMethodPtr(&HPHP::c_ImmVector::t_filterwithkey) },
  { "zip", tg_9ImmVector_zip, getMethodPtr(&HPHP::c_ImmVector::t_zip) },
  { "take", tg_9ImmVector_take, getMethodPtr(&HPHP::c_ImmVector::t_take) },
  { "takeWhile", tg_9ImmVector_takeWhile, getMethodPtr(&HPHP::c_ImmVector::t_takewhile) },
  { "skip", tg_9ImmVector_skip, getMethodPtr(&HPHP::c_ImmVector::t_skip) },
  { "skipWhile", tg_9ImmVector_skipWhile, getMethodPtr(&HPHP::c_ImmVector::t_skipwhile) },
  { "slice", tg_9ImmVector_slice, getMethodPtr(&HPHP::c_ImmVector::t_slice) },
  { "concat", tg_9ImmVector_concat, getMethodPtr(&HPHP::c_ImmVector::t_concat) },
  { "firstValue", tg_9ImmVector_firstValue, getMethodPtr(&HPHP::c_ImmVector::t_firstvalue) },
  { "firstKey", tg_9ImmVector_firstKey, getMethodPtr(&HPHP::c_ImmVector::t_firstkey) },
  { "lastValue", tg_9ImmVector_lastValue, getMethodPtr(&HPHP::c_ImmVector::t_lastvalue) },
  { "lastKey", tg_9ImmVector_lastKey, getMethodPtr(&HPHP::c_ImmVector::t_lastkey) },
  { "keys", tg_9ImmVector_keys, getMethodPtr(&HPHP::c_ImmVector::t_keys) },
  { "__toString", tg_9ImmVector___toString, getMethodPtr(&HPHP::c_ImmVector::t___tostring) },
  { "__get", tg_9ImmVector___get, getMethodPtr(&HPHP::c_ImmVector::t___get) },
  { "__set", tg_9ImmVector___set, getMethodPtr(&HPHP::c_ImmVector::t___set) },
  { "__isset", tg_9ImmVector___isset, getMethodPtr(&HPHP::c_ImmVector::t___isset) },
  { "__unset", tg_9ImmVector___unset, getMethodPtr(&HPHP::c_ImmVector::t___unset) },
  { "toVector", tg_9ImmVector_toVector, getMethodPtr(&HPHP::c_ImmVector::t_tovector) },
  { "toImmVector", tg_9ImmVector_toImmVector, getMethodPtr(&HPHP::c_ImmVector::t_toimmvector) },
  { "toMap", tg_9ImmVector_toMap, getMethodPtr(&HPHP::c_ImmVector::t_tomap) },
  { "toImmMap", tg_9ImmVector_toImmMap, getMethodPtr(&HPHP::c_ImmVector::t_toimmmap) },
  { "toSet", tg_9ImmVector_toSet, getMethodPtr(&HPHP::c_ImmVector::t_toset) },
  { "toImmSet", tg_9ImmVector_toImmSet, getMethodPtr(&HPHP::c_ImmVector::t_toimmset) },
  { "immutable", tg_9ImmVector_immutable, getMethodPtr(&HPHP::c_ImmVector::t_immutable) },
  { "values", tg_9ImmVector_values, getMethodPtr(&HPHP::c_ImmVector::t_values) },
  { "lazy", tg_9ImmVector_lazy, getMethodPtr(&HPHP::c_ImmVector::t_lazy) },
  { "toArray", tg_9ImmVector_toArray, getMethodPtr(&HPHP::c_ImmVector::t_toarray) },
  { "toKeysArray", tg_9ImmVector_toKeysArray, getMethodPtr(&HPHP::c_ImmVector::t_tokeysarray) },
  { "toValuesArray", tg_9ImmVector_toValuesArray, getMethodPtr(&HPHP::c_ImmVector::t_tovaluesarray) },
  { "linearSearch", tg_9ImmVector_linearSearch, getMethodPtr(&HPHP::c_ImmVector::t_linearsearch) }
};

static const long long hhbc_ext_method_count_Map = 55;
static const HhbcExtMethodInfo hhbc_ext_methods_Map[] = {
  { "__construct", tg_3Map___construct, getMethodPtr(&HPHP::c_Map::t___construct) },
  { "isEmpty", tg_3Map_isEmpty, getMethodPtr(&HPHP::c_Map::t_isempty) },
  { "count", tg_3Map_count, getMethodPtr(&HPHP::c_Map::t_count) },
  { "items", tg_3Map_items, getMethodPtr(&HPHP::c_Map::t_items) },
  { "keys", tg_3Map_keys, getMethodPtr(&HPHP::c_Map::t_keys) },
  { "lazy", tg_3Map_lazy, getMethodPtr(&HPHP::c_Map::t_lazy) },
  { "at", tg_3Map_at, getMethodPtr(&HPHP::c_Map::t_at) },
  { "get", tg_3Map_get, getMethodPtr(&HPHP::c_Map::t_get) },
  { "set", tg_3Map_set, getMethodPtr(&HPHP::c_Map::t_set) },
  { "setAll", tg_3Map_setAll, getMethodPtr(&HPHP::c_Map::t_setall) },
  { "clear", tg_3Map_clear, getMethodPtr(&HPHP::c_Map::t_clear) },
  { "contains", tg_3Map_contains, getMethodPtr(&HPHP::c_Map::t_contains) },
  { "containsKey", tg_3Map_containsKey, getMethodPtr(&HPHP::c_Map::t_containskey) },
  { "remove", tg_3Map_remove, getMethodPtr(&HPHP::c_Map::t_remove) },
  { "removeKey", tg_3Map_removeKey, getMethodPtr(&HPHP::c_Map::t_removekey) },
  { "add", tg_3Map_add, getMethodPtr(&HPHP::c_Map::t_add) },
  { "addAll", tg_3Map_addAll, getMethodPtr(&HPHP::c_Map::t_addall) },
  { "reserve", tg_3Map_reserve, getMethodPtr(&HPHP::c_Map::t_reserve) },
  { "toArray", tg_3Map_toArray, getMethodPtr(&HPHP::c_Map::t_toarray) },
  { "toVector", tg_3Map_toVector, getMethodPtr(&HPHP::c_Map::t_tovector) },
  { "toImmVector", tg_3Map_toImmVector, getMethodPtr(&HPHP::c_Map::t_toimmvector) },
  { "toMap", tg_3Map_toMap, getMethodPtr(&HPHP::c_Map::t_tomap) },
  { "toImmMap", tg_3Map_toImmMap, getMethodPtr(&HPHP::c_Map::t_toimmmap) },
  { "toSet", tg_3Map_toSet, getMethodPtr(&HPHP::c_Map::t_toset) },
  { "toImmSet", tg_3Map_toImmSet, getMethodPtr(&HPHP::c_Map::t_toimmset) },
  { "immutable", tg_3Map_immutable, getMethodPtr(&HPHP::c_Map::t_immutable) },
  { "values", tg_3Map_values, getMethodPtr(&HPHP::c_Map::t_values) },
  { "toKeysArray", tg_3Map_toKeysArray, getMethodPtr(&HPHP::c_Map::t_tokeysarray) },
  { "toValuesArray", tg_3Map_toValuesArray, getMethodPtr(&HPHP::c_Map::t_tovaluesarray) },
  { "differenceByKey", tg_3Map_differenceByKey, getMethodPtr(&HPHP::c_Map::t_differencebykey) },
  { "getIterator", tg_3Map_getIterator, getMethodPtr(&HPHP::c_Map::t_getiterator) },
  { "map", tg_3Map_map, getMethodPtr(&HPHP::c_Map::t_map) },
  { "mapWithKey", tg_3Map_mapWithKey, getMethodPtr(&HPHP::c_Map::t_mapwithkey) },
  { "filter", tg_3Map_filter, getMethodPtr(&HPHP::c_Map::t_filter) },
  { "filterWithKey", tg_3Map_filterWithKey, getMethodPtr(&HPHP::c_Map::t_filterwithkey) },
  { "retain", tg_3Map_retain, getMethodPtr(&HPHP::c_Map::t_retain) },
  { "retainWithKey", tg_3Map_retainWithKey, getMethodPtr(&HPHP::c_Map::t_retainwithkey) },
  { "zip", tg_3Map_zip, getMethodPtr(&HPHP::c_Map::t_zip) },
  { "take", tg_3Map_take, getMethodPtr(&HPHP::c_Map::t_take) },
  { "takeWhile", tg_3Map_takeWhile, getMethodPtr(&HPHP::c_Map::t_takewhile) },
  { "skip", tg_3Map_skip, getMethodPtr(&HPHP::c_Map::t_skip) },
  { "skipWhile", tg_3Map_skipWhile, getMethodPtr(&HPHP::c_Map::t_skipwhile) },
  { "slice", tg_3Map_slice, getMethodPtr(&HPHP::c_Map::t_slice) },
  { "concat", tg_3Map_concat, getMethodPtr(&HPHP::c_Map::t_concat) },
  { "firstValue", tg_3Map_firstValue, getMethodPtr(&HPHP::c_Map::t_firstvalue) },
  { "firstKey", tg_3Map_firstKey, getMethodPtr(&HPHP::c_Map::t_firstkey) },
  { "lastValue", tg_3Map_lastValue, getMethodPtr(&HPHP::c_Map::t_lastvalue) },
  { "lastKey", tg_3Map_lastKey, getMethodPtr(&HPHP::c_Map::t_lastkey) },
  { "__toString", tg_3Map___toString, getMethodPtr(&HPHP::c_Map::t___tostring) },
  { "__get", tg_3Map___get, getMethodPtr(&HPHP::c_Map::t___get) },
  { "__set", tg_3Map___set, getMethodPtr(&HPHP::c_Map::t___set) },
  { "__isset", tg_3Map___isset, getMethodPtr(&HPHP::c_Map::t___isset) },
  { "__unset", tg_3Map___unset, getMethodPtr(&HPHP::c_Map::t___unset) },
  { "fromItems", tg_3Map_fromItems, getMethodPtr(&HPHP::c_Map::ti_fromitems) },
  { "fromArray", tg_3Map_fromArray, getMethodPtr(&HPHP::c_Map::ti_fromarray) }
};

static const long long hhbc_ext_method_count_ImmMap = 44;
static const HhbcExtMethodInfo hhbc_ext_methods_ImmMap[] = {
  { "__construct", tg_6ImmMap___construct, getMethodPtr(&HPHP::c_ImmMap::t___construct) },
  { "isEmpty", tg_6ImmMap_isEmpty, getMethodPtr(&HPHP::c_ImmMap::t_isempty) },
  { "count", tg_6ImmMap_count, getMethodPtr(&HPHP::c_ImmMap::t_count) },
  { "items", tg_6ImmMap_items, getMethodPtr(&HPHP::c_ImmMap::t_items) },
  { "keys", tg_6ImmMap_keys, getMethodPtr(&HPHP::c_ImmMap::t_keys) },
  { "lazy", tg_6ImmMap_lazy, getMethodPtr(&HPHP::c_ImmMap::t_lazy) },
  { "at", tg_6ImmMap_at, getMethodPtr(&HPHP::c_ImmMap::t_at) },
  { "get", tg_6ImmMap_get, getMethodPtr(&HPHP::c_ImmMap::t_get) },
  { "contains", tg_6ImmMap_contains, getMethodPtr(&HPHP::c_ImmMap::t_contains) },
  { "containsKey", tg_6ImmMap_containsKey, getMethodPtr(&HPHP::c_ImmMap::t_containskey) },
  { "toArray", tg_6ImmMap_toArray, getMethodPtr(&HPHP::c_ImmMap::t_toarray) },
  { "toVector", tg_6ImmMap_toVector, getMethodPtr(&HPHP::c_ImmMap::t_tovector) },
  { "toImmVector", tg_6ImmMap_toImmVector, getMethodPtr(&HPHP::c_ImmMap::t_toimmvector) },
  { "toMap", tg_6ImmMap_toMap, getMethodPtr(&HPHP::c_ImmMap::t_tomap) },
  { "toImmMap", tg_6ImmMap_toImmMap, getMethodPtr(&HPHP::c_ImmMap::t_toimmmap) },
  { "toSet", tg_6ImmMap_toSet, getMethodPtr(&HPHP::c_ImmMap::t_toset) },
  { "toImmSet", tg_6ImmMap_toImmSet, getMethodPtr(&HPHP::c_ImmMap::t_toimmset) },
  { "immutable", tg_6ImmMap_immutable, getMethodPtr(&HPHP::c_ImmMap::t_immutable) },
  { "values", tg_6ImmMap_values, getMethodPtr(&HPHP::c_ImmMap::t_values) },
  { "toKeysArray", tg_6ImmMap_toKeysArray, getMethodPtr(&HPHP::c_ImmMap::t_tokeysarray) },
  { "toValuesArray", tg_6ImmMap_toValuesArray, getMethodPtr(&HPHP::c_ImmMap::t_tovaluesarray) },
  { "differenceByKey", tg_6ImmMap_differenceByKey, getMethodPtr(&HPHP::c_ImmMap::t_differencebykey) },
  { "getIterator", tg_6ImmMap_getIterator, getMethodPtr(&HPHP::c_ImmMap::t_getiterator) },
  { "map", tg_6ImmMap_map, getMethodPtr(&HPHP::c_ImmMap::t_map) },
  { "mapWithKey", tg_6ImmMap_mapWithKey, getMethodPtr(&HPHP::c_ImmMap::t_mapwithkey) },
  { "filter", tg_6ImmMap_filter, getMethodPtr(&HPHP::c_ImmMap::t_filter) },
  { "filterWithKey", tg_6ImmMap_filterWithKey, getMethodPtr(&HPHP::c_ImmMap::t_filterwithkey) },
  { "zip", tg_6ImmMap_zip, getMethodPtr(&HPHP::c_ImmMap::t_zip) },
  { "take", tg_6ImmMap_take, getMethodPtr(&HPHP::c_ImmMap::t_take) },
  { "takeWhile", tg_6ImmMap_takeWhile, getMethodPtr(&HPHP::c_ImmMap::t_takewhile) },
  { "skip", tg_6ImmMap_skip, getMethodPtr(&HPHP::c_ImmMap::t_skip) },
  { "skipWhile", tg_6ImmMap_skipWhile, getMethodPtr(&HPHP::c_ImmMap::t_skipwhile) },
  { "slice", tg_6ImmMap_slice, getMethodPtr(&HPHP::c_ImmMap::t_slice) },
  { "concat", tg_6ImmMap_concat, getMethodPtr(&HPHP::c_ImmMap::t_concat) },
  { "firstValue", tg_6ImmMap_firstValue, getMethodPtr(&HPHP::c_ImmMap::t_firstvalue) },
  { "firstKey", tg_6ImmMap_firstKey, getMethodPtr(&HPHP::c_ImmMap::t_firstkey) },
  { "lastValue", tg_6ImmMap_lastValue, getMethodPtr(&HPHP::c_ImmMap::t_lastvalue) },
  { "lastKey", tg_6ImmMap_lastKey, getMethodPtr(&HPHP::c_ImmMap::t_lastkey) },
  { "__toString", tg_6ImmMap___toString, getMethodPtr(&HPHP::c_ImmMap::t___tostring) },
  { "__get", tg_6ImmMap___get, getMethodPtr(&HPHP::c_ImmMap::t___get) },
  { "__set", tg_6ImmMap___set, getMethodPtr(&HPHP::c_ImmMap::t___set) },
  { "__isset", tg_6ImmMap___isset, getMethodPtr(&HPHP::c_ImmMap::t___isset) },
  { "__unset", tg_6ImmMap___unset, getMethodPtr(&HPHP::c_ImmMap::t___unset) },
  { "fromItems", tg_6ImmMap_fromItems, getMethodPtr(&HPHP::c_ImmMap::ti_fromitems) }
};

static const long long hhbc_ext_method_count_Set = 53;
static const HhbcExtMethodInfo hhbc_ext_methods_Set[] = {
  { "__construct", tg_3Set___construct, getMethodPtr(&HPHP::c_Set::t___construct) },
  { "isEmpty", tg_3Set_isEmpty, getMethodPtr(&HPHP::c_Set::t_isempty) },
  { "count", tg_3Set_count, getMethodPtr(&HPHP::c_Set::t_count) },
  { "items", tg_3Set_items, getMethodPtr(&HPHP::c_Set::t_items) },
  { "keys", tg_3Set_keys, getMethodPtr(&HPHP::c_Set::t_keys) },
  { "values", tg_3Set_values, getMethodPtr(&HPHP::c_Set::t_values) },
  { "lazy", tg_3Set_lazy, getMethodPtr(&HPHP::c_Set::t_lazy) },
  { "clear", tg_3Set_clear, getMethodPtr(&HPHP::c_Set::t_clear) },
  { "contains", tg_3Set_contains, getMethodPtr(&HPHP::c_Set::t_contains) },
  { "remove", tg_3Set_remove, getMethodPtr(&HPHP::c_Set::t_remove) },
  { "add", tg_3Set_add, getMethodPtr(&HPHP::c_Set::t_add) },
  { "addAll", tg_3Set_addAll, getMethodPtr(&HPHP::c_Set::t_addall) },
  { "addAllKeysOf", tg_3Set_addAllKeysOf, getMethodPtr(&HPHP::c_Set::t_addallkeysof) },
  { "reserve", tg_3Set_reserve, getMethodPtr(&HPHP::c_Set::t_reserve) },
  { "toArray", tg_3Set_toArray, getMethodPtr(&HPHP::c_Set::t_toarray) },
  { "toVector", tg_3Set_toVector, getMethodPtr(&HPHP::c_Set::t_tovector) },
  { "toImmVector", tg_3Set_toImmVector, getMethodPtr(&HPHP::c_Set::t_toimmvector) },
  { "toMap", tg_3Set_toMap, getMethodPtr(&HPHP::c_Set::t_tomap) },
  { "toImmMap", tg_3Set_toImmMap, getMethodPtr(&HPHP::c_Set::t_toimmmap) },
  { "toSet", tg_3Set_toSet, getMethodPtr(&HPHP::c_Set::t_toset) },
  { "toImmSet", tg_3Set_toImmSet, getMethodPtr(&HPHP::c_Set::t_toimmset) },
  { "immutable", tg_3Set_immutable, getMethodPtr(&HPHP::c_Set::t_immutable) },
  { "toKeysArray", tg_3Set_toKeysArray, getMethodPtr(&HPHP::c_Set::t_tokeysarray) },
  { "toValuesArray", tg_3Set_toValuesArray, getMethodPtr(&HPHP::c_Set::t_tovaluesarray) },
  { "getIterator", tg_3Set_getIterator, getMethodPtr(&HPHP::c_Set::t_getiterator) },
  { "map", tg_3Set_map, getMethodPtr(&HPHP::c_Set::t_map) },
  { "mapWithKey", tg_3Set_mapWithKey, getMethodPtr(&HPHP::c_Set::t_mapwithkey) },
  { "filter", tg_3Set_filter, getMethodPtr(&HPHP::c_Set::t_filter) },
  { "filterWithKey", tg_3Set_filterWithKey, getMethodPtr(&HPHP::c_Set::t_filterwithkey) },
  { "retain", tg_3Set_retain, getMethodPtr(&HPHP::c_Set::t_retain) },
  { "retainWithKey", tg_3Set_retainWithKey, getMethodPtr(&HPHP::c_Set::t_retainwithkey) },
  { "zip", tg_3Set_zip, getMethodPtr(&HPHP::c_Set::t_zip) },
  { "take", tg_3Set_take, getMethodPtr(&HPHP::c_Set::t_take) },
  { "takeWhile", tg_3Set_takeWhile, getMethodPtr(&HPHP::c_Set::t_takewhile) },
  { "skip", tg_3Set_skip, getMethodPtr(&HPHP::c_Set::t_skip) },
  { "skipWhile", tg_3Set_skipWhile, getMethodPtr(&HPHP::c_Set::t_skipwhile) },
  { "slice", tg_3Set_slice, getMethodPtr(&HPHP::c_Set::t_slice) },
  { "concat", tg_3Set_concat, getMethodPtr(&HPHP::c_Set::t_concat) },
  { "firstValue", tg_3Set_firstValue, getMethodPtr(&HPHP::c_Set::t_firstvalue) },
  { "firstKey", tg_3Set_firstKey, getMethodPtr(&HPHP::c_Set::t_firstkey) },
  { "lastValue", tg_3Set_lastValue, getMethodPtr(&HPHP::c_Set::t_lastvalue) },
  { "lastKey", tg_3Set_lastKey, getMethodPtr(&HPHP::c_Set::t_lastkey) },
  { "removeAll", tg_3Set_removeAll, getMethodPtr(&HPHP::c_Set::t_removeall) },
  { "difference", tg_3Set_difference, getMethodPtr(&HPHP::c_Set::t_difference) },
  { "__toString", tg_3Set___toString, getMethodPtr(&HPHP::c_Set::t___tostring) },
  { "__get", tg_3Set___get, getMethodPtr(&HPHP::c_Set::t___get) },
  { "__set", tg_3Set___set, getMethodPtr(&HPHP::c_Set::t___set) },
  { "__isset", tg_3Set___isset, getMethodPtr(&HPHP::c_Set::t___isset) },
  { "__unset", tg_3Set___unset, getMethodPtr(&HPHP::c_Set::t___unset) },
  { "fromItems", tg_3Set_fromItems, getMethodPtr(&HPHP::c_Set::ti_fromitems) },
  { "fromKeysOf", tg_3Set_fromKeysOf, getMethodPtr(&HPHP::c_Set::ti_fromkeysof) },
  { "fromArray", tg_3Set_fromArray, getMethodPtr(&HPHP::c_Set::ti_fromarray) },
  { "fromArrays", tg_3Set_fromArrays, getMethodPtr(&HPHP::c_Set::ti_fromarrays) }
};

static const long long hhbc_ext_method_count_ImmSet = 42;
static const HhbcExtMethodInfo hhbc_ext_methods_ImmSet[] = {
  { "__construct", tg_6ImmSet___construct, getMethodPtr(&HPHP::c_ImmSet::t___construct) },
  { "isEmpty", tg_6ImmSet_isEmpty, getMethodPtr(&HPHP::c_ImmSet::t_isempty) },
  { "count", tg_6ImmSet_count, getMethodPtr(&HPHP::c_ImmSet::t_count) },
  { "items", tg_6ImmSet_items, getMethodPtr(&HPHP::c_ImmSet::t_items) },
  { "keys", tg_6ImmSet_keys, getMethodPtr(&HPHP::c_ImmSet::t_keys) },
  { "values", tg_6ImmSet_values, getMethodPtr(&HPHP::c_ImmSet::t_values) },
  { "lazy", tg_6ImmSet_lazy, getMethodPtr(&HPHP::c_ImmSet::t_lazy) },
  { "contains", tg_6ImmSet_contains, getMethodPtr(&HPHP::c_ImmSet::t_contains) },
  { "toArray", tg_6ImmSet_toArray, getMethodPtr(&HPHP::c_ImmSet::t_toarray) },
  { "toVector", tg_6ImmSet_toVector, getMethodPtr(&HPHP::c_ImmSet::t_tovector) },
  { "toImmVector", tg_6ImmSet_toImmVector, getMethodPtr(&HPHP::c_ImmSet::t_toimmvector) },
  { "toMap", tg_6ImmSet_toMap, getMethodPtr(&HPHP::c_ImmSet::t_tomap) },
  { "toImmMap", tg_6ImmSet_toImmMap, getMethodPtr(&HPHP::c_ImmSet::t_toimmmap) },
  { "toSet", tg_6ImmSet_toSet, getMethodPtr(&HPHP::c_ImmSet::t_toset) },
  { "toImmSet", tg_6ImmSet_toImmSet, getMethodPtr(&HPHP::c_ImmSet::t_toimmset) },
  { "immutable", tg_6ImmSet_immutable, getMethodPtr(&HPHP::c_ImmSet::t_immutable) },
  { "toKeysArray", tg_6ImmSet_toKeysArray, getMethodPtr(&HPHP::c_ImmSet::t_tokeysarray) },
  { "toValuesArray", tg_6ImmSet_toValuesArray, getMethodPtr(&HPHP::c_ImmSet::t_tovaluesarray) },
  { "getIterator", tg_6ImmSet_getIterator, getMethodPtr(&HPHP::c_ImmSet::t_getiterator) },
  { "map", tg_6ImmSet_map, getMethodPtr(&HPHP::c_ImmSet::t_map) },
  { "mapWithKey", tg_6ImmSet_mapWithKey, getMethodPtr(&HPHP::c_ImmSet::t_mapwithkey) },
  { "filter", tg_6ImmSet_filter, getMethodPtr(&HPHP::c_ImmSet::t_filter) },
  { "filterWithKey", tg_6ImmSet_filterWithKey, getMethodPtr(&HPHP::c_ImmSet::t_filterwithkey) },
  { "zip", tg_6ImmSet_zip, getMethodPtr(&HPHP::c_ImmSet::t_zip) },
  { "take", tg_6ImmSet_take, getMethodPtr(&HPHP::c_ImmSet::t_take) },
  { "takeWhile", tg_6ImmSet_takeWhile, getMethodPtr(&HPHP::c_ImmSet::t_takewhile) },
  { "skip", tg_6ImmSet_skip, getMethodPtr(&HPHP::c_ImmSet::t_skip) },
  { "skipWhile", tg_6ImmSet_skipWhile, getMethodPtr(&HPHP::c_ImmSet::t_skipwhile) },
  { "slice", tg_6ImmSet_slice, getMethodPtr(&HPHP::c_ImmSet::t_slice) },
  { "concat", tg_6ImmSet_concat, getMethodPtr(&HPHP::c_ImmSet::t_concat) },
  { "firstValue", tg_6ImmSet_firstValue, getMethodPtr(&HPHP::c_ImmSet::t_firstvalue) },
  { "firstKey", tg_6ImmSet_firstKey, getMethodPtr(&HPHP::c_ImmSet::t_firstkey) },
  { "lastValue", tg_6ImmSet_lastValue, getMethodPtr(&HPHP::c_ImmSet::t_lastvalue) },
  { "lastKey", tg_6ImmSet_lastKey, getMethodPtr(&HPHP::c_ImmSet::t_lastkey) },
  { "__toString", tg_6ImmSet___toString, getMethodPtr(&HPHP::c_ImmSet::t___tostring) },
  { "__get", tg_6ImmSet___get, getMethodPtr(&HPHP::c_ImmSet::t___get) },
  { "__set", tg_6ImmSet___set, getMethodPtr(&HPHP::c_ImmSet::t___set) },
  { "__isset", tg_6ImmSet___isset, getMethodPtr(&HPHP::c_ImmSet::t___isset) },
  { "__unset", tg_6ImmSet___unset, getMethodPtr(&HPHP::c_ImmSet::t___unset) },
  { "fromItems", tg_6ImmSet_fromItems, getMethodPtr(&HPHP::c_ImmSet::ti_fromitems) },
  { "fromKeysOf", tg_6ImmSet_fromKeysOf, getMethodPtr(&HPHP::c_ImmSet::ti_fromkeysof) },
  { "fromArrays", tg_6ImmSet_fromArrays, getMethodPtr(&HPHP::c_ImmSet::ti_fromarrays) }
};

static const long long hhbc_ext_method_count_Pair = 42;
static const HhbcExtMethodInfo hhbc_ext_methods_Pair[] = {
  { "__construct", tg_4Pair___construct, getMethodPtr(&HPHP::c_Pair::t___construct) },
  { "isEmpty", tg_4Pair_isEmpty, getMethodPtr(&HPHP::c_Pair::t_isempty) },
  { "count", tg_4Pair_count, getMethodPtr(&HPHP::c_Pair::t_count) },
  { "items", tg_4Pair_items, getMethodPtr(&HPHP::c_Pair::t_items) },
  { "keys", tg_4Pair_keys, getMethodPtr(&HPHP::c_Pair::t_keys) },
  { "values", tg_4Pair_values, getMethodPtr(&HPHP::c_Pair::t_values) },
  { "lazy", tg_4Pair_lazy, getMethodPtr(&HPHP::c_Pair::t_lazy) },
  { "toArray", tg_4Pair_toArray, getMethodPtr(&HPHP::c_Pair::t_toarray) },
  { "toVector", tg_4Pair_toVector, getMethodPtr(&HPHP::c_Pair::t_tovector) },
  { "toImmVector", tg_4Pair_toImmVector, getMethodPtr(&HPHP::c_Pair::t_toimmvector) },
  { "toMap", tg_4Pair_toMap, getMethodPtr(&HPHP::c_Pair::t_tomap) },
  { "toImmMap", tg_4Pair_toImmMap, getMethodPtr(&HPHP::c_Pair::t_toimmmap) },
  { "toSet", tg_4Pair_toSet, getMethodPtr(&HPHP::c_Pair::t_toset) },
  { "toImmSet", tg_4Pair_toImmSet, getMethodPtr(&HPHP::c_Pair::t_toimmset) },
  { "immutable", tg_4Pair_immutable, getMethodPtr(&HPHP::c_Pair::t_immutable) },
  { "toKeysArray", tg_4Pair_toKeysArray, getMethodPtr(&HPHP::c_Pair::t_tokeysarray) },
  { "toValuesArray", tg_4Pair_toValuesArray, getMethodPtr(&HPHP::c_Pair::t_tovaluesarray) },
  { "getIterator", tg_4Pair_getIterator, getMethodPtr(&HPHP::c_Pair::t_getiterator) },
  { "map", tg_4Pair_map, getMethodPtr(&HPHP::c_Pair::t_map) },
  { "mapWithKey", tg_4Pair_mapWithKey, getMethodPtr(&HPHP::c_Pair::t_mapwithkey) },
  { "filter", tg_4Pair_filter, getMethodPtr(&HPHP::c_Pair::t_filter) },
  { "filterWithKey", tg_4Pair_filterWithKey, getMethodPtr(&HPHP::c_Pair::t_filterwithkey) },
  { "zip", tg_4Pair_zip, getMethodPtr(&HPHP::c_Pair::t_zip) },
  { "take", tg_4Pair_take, getMethodPtr(&HPHP::c_Pair::t_take) },
  { "takeWhile", tg_4Pair_takeWhile, getMethodPtr(&HPHP::c_Pair::t_takewhile) },
  { "skip", tg_4Pair_skip, getMethodPtr(&HPHP::c_Pair::t_skip) },
  { "skipWhile", tg_4Pair_skipWhile, getMethodPtr(&HPHP::c_Pair::t_skipwhile) },
  { "linearSearch", tg_4Pair_linearSearch, getMethodPtr(&HPHP::c_Pair::t_linearsearch) },
  { "slice", tg_4Pair_slice, getMethodPtr(&HPHP::c_Pair::t_slice) },
  { "concat", tg_4Pair_concat, getMethodPtr(&HPHP::c_Pair::t_concat) },
  { "firstValue", tg_4Pair_firstValue, getMethodPtr(&HPHP::c_Pair::t_firstvalue) },
  { "firstKey", tg_4Pair_firstKey, getMethodPtr(&HPHP::c_Pair::t_firstkey) },
  { "lastValue", tg_4Pair_lastValue, getMethodPtr(&HPHP::c_Pair::t_lastvalue) },
  { "lastKey", tg_4Pair_lastKey, getMethodPtr(&HPHP::c_Pair::t_lastkey) },
  { "at", tg_4Pair_at, getMethodPtr(&HPHP::c_Pair::t_at) },
  { "get", tg_4Pair_get, getMethodPtr(&HPHP::c_Pair::t_get) },
  { "containsKey", tg_4Pair_containsKey, getMethodPtr(&HPHP::c_Pair::t_containskey) },
  { "__toString", tg_4Pair___toString, getMethodPtr(&HPHP::c_Pair::t___tostring) },
  { "__get", tg_4Pair___get, getMethodPtr(&HPHP::c_Pair::t___get) },
  { "__set", tg_4Pair___set, getMethodPtr(&HPHP::c_Pair::t___set) },
  { "__isset", tg_4Pair___isset, getMethodPtr(&HPHP::c_Pair::t___isset) },
  { "__unset", tg_4Pair___unset, getMethodPtr(&HPHP::c_Pair::t___unset) }
};

const long long hhbc_ext_class_count = 8;
extern void delete_Closure(ObjectData*, const Class*);
extern void delete_Vector(ObjectData*, const Class*);
extern void delete_ImmVector(ObjectData*, const Class*);
extern void delete_Map(ObjectData*, const Class*);
extern void delete_ImmMap(ObjectData*, const Class*);
extern void delete_Set(ObjectData*, const Class*);
extern void delete_ImmSet(ObjectData*, const Class*);
extern void delete_Pair(ObjectData*, const Class*);
const HhbcExtClassInfo hhbc_ext_classes[] = {
  { "Closure", new_Closure_Instance,delete_Closure, sizeof(c_Closure), intptr_t(static_cast<ObjectData*>(reinterpret_cast<c_Closure*>(0x100))) - 0x100, hhbc_ext_method_count_Closure, hhbc_ext_methods_Closure, &c_Closure::classof() },
  { "HH\\Vector", new_Vector_Instance,delete_Vector, sizeof(c_Vector), intptr_t(static_cast<ObjectData*>(reinterpret_cast<c_Vector*>(0x100))) - 0x100, hhbc_ext_method_count_Vector, hhbc_ext_methods_Vector, &c_Vector::classof() },
  { "HH\\ImmVector", new_ImmVector_Instance,delete_ImmVector, sizeof(c_ImmVector), intptr_t(static_cast<ObjectData*>(reinterpret_cast<c_ImmVector*>(0x100))) - 0x100, hhbc_ext_method_count_ImmVector, hhbc_ext_methods_ImmVector, &c_ImmVector::classof() },
  { "HH\\Map", new_Map_Instance,delete_Map, sizeof(c_Map), intptr_t(static_cast<ObjectData*>(reinterpret_cast<c_Map*>(0x100))) - 0x100, hhbc_ext_method_count_Map, hhbc_ext_methods_Map, &c_Map::classof() },
  { "HH\\ImmMap", new_ImmMap_Instance,delete_ImmMap, sizeof(c_ImmMap), intptr_t(static_cast<ObjectData*>(reinterpret_cast<c_ImmMap*>(0x100))) - 0x100, hhbc_ext_method_count_ImmMap, hhbc_ext_methods_ImmMap, &c_ImmMap::classof() },
  { "HH\\Set", new_Set_Instance,delete_Set, sizeof(c_Set), intptr_t(static_cast<ObjectData*>(reinterpret_cast<c_Set*>(0x100))) - 0x100, hhbc_ext_method_count_Set, hhbc_ext_methods_Set, &c_Set::classof() },
  { "HH\\ImmSet", new_ImmSet_Instance,delete_ImmSet, sizeof(c_ImmSet), intptr_t(static_cast<ObjectData*>(reinterpret_cast<c_ImmSet*>(0x100))) - 0x100, hhbc_ext_method_count_ImmSet, hhbc_ext_methods_ImmSet, &c_ImmSet::classof() },
  { "HH\\Pair", new_Pair_Instance,delete_Pair, sizeof(c_Pair), intptr_t(static_cast<ObjectData*>(reinterpret_cast<c_Pair*>(0x100))) - 0x100, hhbc_ext_method_count_Pair, hhbc_ext_methods_Pair, &c_Pair::classof() }
};

} // namespace HPHP
